Huge list of notes and TODOs (complete, partially complete, and incomplete)

Bugs and Features
  Conventions / Legend:
    status: "-" means not done, "~" means in progress, "+" means done, "?" means not sure, "x" means canceled, "<" means future
    type: "bug" means broken, "feature" means would be cool

  summarize:
    - things to do
      grep "[-~] \(bug\|feature\):" TODO | less -iSEX
      - api:
      - gui:
    - next targets: 
      grep ⊚ TODO | tail -n+2 | less -iSEX

Releasing a version
# mvn release:perform -DreleaseProfiles=src,javadoc -Darguments=-Dgpg.passphrase=PASSPHRASE
mvn -DpushChanges=false release:prepare
  * key to getting this working was bumping maven-release-plugin to 2.3.2 (was getting 2.0 as could be verified with mvn help:effective-pom)
  - updates poms from snapshot to a solid version
  - commits
  - updates poms to next snapshot version
  - commits

    https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide

Yawni Subprojects
+ api
+ data
  - should there be 1 per WN version? (..., 2.1, 3.0, ..., etc.)
+ browser
  - depends on core
  - build standalone (aka dist jar)
    mvn -Dmaven.test.skip=true -PuseYawniData,useLog4j,makeShadedJar clean package
    mvn -Dmaven.test.skip=true -PuseYawniData,useLog4j,makeSignedJar,makeShadedJar clean package (9.6 MB target/signed/yawni-wordnet-browser-2.0.0-SNAPSHOT.jar)

Apps of WordNet
- WordNet supersenses (WNSS) (Ciaramita and Altun, 2006)
  Broad-Coverage Sense Disambiguation and Information Extraction with a Supersense Sequence Tagger
  https://sourceforge.net/projects/supersensetag/
  - Java port "underway" by Jordi Atserias | Yahoo! Research (sourceforge user: batalla)
    - https://supersensetag.svn.sourceforge.net/svnroot/supersensetag/branches/SSTjava/
- Apache Jackrabbit includes Sandbox SynonymProvider using org.apache.lucene.index.memory.SynonymMap
  jackrabbit/sandbox/wordnet-synonyms/src/main/java/org/apache/jackrabbit/core/query/wordnet/WordNetSynonyms.java
- Using the 'Alignment API' with Wordnet
  https://alignapi.gforge.inria.fr/alignwn.html

Bob Carpenter's Stemming Examples (https://lingpipe-blog.com/2009/02/25/stemming-morphology-corpus-coding-standards/)
  * odious: odious ? probably means "odium" or could mean it has no further stem ?
  * euphoria: euphoria (CELEX-2 stems “euphoric” to “euphoria”)
  * OK mathematical: mathematics
  * epidemiology: epidemic (CELEX: missing) (WordNet: epidemiologic, epidemiological, epidemiologist - no idea how to get to epidemic)
  * hypocrisy: hypocrisy (CELEX: hypocrite) (WordNet: hypocritical)
  * OK maximize: maximum 

Affixes
  * unmodernised: modernised (CELEX: missing) (? antonym)
  * OK prearrangement: prearrange
  * OK unlocking: unlock (CELEX: missing)
  * OK incorrigible: corrigible (? antonym)
  * OK disability: disable
  * OK inconvenience: inconvenient (CELEX: convenient)
  * OK resentencing: sentencing (CELEX: missing) (* tricky - "re-sentencing")
  * overcollateralization: collateralization (CELEX: missing) 

Compounds
  * OK cockfighting: cockfight (CELEX: cock fighting) (gloss)
  * SPACE headquarters: head quarters
  * ultraleftist: ultra leftist (CELEX: missing)
  * OK omnipotence: omnipotent
  * steelmaking: steel making (CELEX: missing) (WordNet: steelmaker has gloss "...making steel")
  * SPACE stockholder: stock holder
  * signalmen: signalman (-)
  * OK DASH weatherbeaten: weather beaten (CELEX: weather-beaten) (tricky: dash)
  * SPACE supercomputer: super computer (CELEX: missing)
  * newsgathering: news gathering (CELEX: missing) 

? why does this web UI to WN 3.0 https://poets.notredame.ac.jp/cgi-bin/wn
  show "microorganism" and "infectious agent" as Pertainyms of "viral" ?
  - these are both immediate hypernyms of the derivationally related source noun "virus" 
    + are derivationally related forms of adjectives "Pertainyms" ? no
    + is this just for "sense context" ? -- appears so, just missing level of indent to show this

- WordNet data omissions
  - derivational link from "employ" → "employable"
  - derivational link from "recursion" → "recusrive"
  - singular form "french fry" (has "french-fry" and "french fries")
  - exceptional spelling for "blogging" (double-'g' form missing)

Release TODOs

- wild idea:
  - do per-RelationType customized behaviors in getRelations() e.g., VERB_GROUP,
    and maybe MERONYM, HOLONYM, DOMAIN
    ! fail: at least for Word, VERB_GROUP would need List<List<RelationArgument>> since it clumps
    - wilder idea: make a MetaSynset/VerbGroup object

- synset groups ; simple pair (Relation) usually suffices
  verb VERB_GROUP
  adj SIMILAR_TO
   - connects satellite adjectives to their head and vice-versa

- what clever things could I do with JavaScript integration ?
  - probably want some little higher-level accessors ?
    - add a debug terminal
      ? how would errors be reported ?
    - maybe want some default includes
  - if fast-boot be desirable, make FileManager.getFileStream() impl configurable ?
  - for some reason, Apple JVM doesn't include Rhino?
    - can be fetched from: https://repo1.maven.org/maven2/rhino/js/
      <dependency>
        <groupId>rhino</groupId>
        <artifactId>js</artifactId>
        <version>1.7R2</version>
      </dependency>

// - do a Lucene Tokenizer / Analyzer integration - good performance test best
//   - use tikluc demo
//     - indexed reuters docs: https://192.168.1.66:8880/skwish/meta?id=10500
//
//  org.apache.lucene.analysis.TeeSinkTokenFilter.SinkFilter
//    - seems to be modern way to "hook into" Token stream
//  - related Lucene contrib examples
//    - org.apache.lucene.analysis.shingle.ShingleFilter
//      - constructs shingles (token n-grams) from a token stream, i.e., creates combinations of tokens as a single token.
//    - org.apache.lucene.analysis.sinks.DateRecognizerSinkFilter
//    - org.apache.lucene.analysis.compound.
//      - decomposes 1 token into more than 1 (Germanic languages)
//
// - use Lucene StandardTokenizer (JFlex: fast!)
// - use shingle generator to create alternatives
//   - what pattern does it generate the various shingle lengths in ? (5's, 4's, 3's, 2's, 1's would be ideal :))
//     - don't ultimately, only emit 1 token per position

// - hyperlinking the glosses in the browser would be a good way to exercise this
//    - basically, factors out tokenization and exercises Lucene plumbing

// - learn new Lucene Token/Tokenizer/TokenStream/TokenFilter
//   - AttributeSource
//     - TokenStream
//       - Tokenizer (input isa Reader)
//       - TokenFilter (input isa TokenStream) (Uwe says decorator pattern: TokenFilter adds functionality to a Tokenizer)
//       - TeeSinkTokenFilter.SinkTokenStream
//       - NumericTokenStream
//   - "Attributes instead of fields of Tokens"
//   - AttributeImpl implements Attribute
//     - Token (implements Attribute,  FlagsAttribute, OffsetAttribute, PayloadAttribute, PositionIncrementAttribute, TermAttribute, TypeAttribute)
//   - AttributeSource container of AttributeImpls

- can DFS Iterator be easily created with AbstractIterator with no explicit stack ?
  - i.e., with a constant amount of extra space
  - https://lingpipe-blog.com/2009/01/27/quiz-answer-continuation-passing-style-for-converting-visitors-to-iterators/

- Ted Pederson's WordNet stop list; "normally used as function words"
  I, a, an, as, at, by, he, his, me, or, thou, us, who
  - missing 'it'; 'his' not in WordNet 3.0
  - Paul R. Dunn's stop list; Christiane Fellbaum adds that they are often ADV
    (author of Visuwords: dunnbypaul.net
    - ActionScript / Flash
    - PHP
    )
the
this
that
those
these
a
and
or
nor
because
whenever
whereas
unless
if
than
has
am
are
is
do
does
doth
bring
had
was
did
got
took
brought
were
been
seen
? taken - irregular
cannot
to
for
with
without
of
from
against
into
upon
toward
since
until
I
me
you
he
him
she
her
it
we
us
they
them
everybody
everyone
anyone
oneself
myself
yourself
himself
herself
itself
ourselves
yourselves
themselves
my
mine
your
yours
his
her
hers
its
our
ours
their
theirs
which
what
shall
could
would
should
ought
everything
? children - irregular

- https://en.wikipedia.org/wiki/File:Flag_of_the_United_States.svg

- interesting JavaDoc paragraph from JComboBox docs (references package-summary.html)
   * <p>
   * <strong>Warning:</strong> Swing is not thread safe. For more
   * information see <a href="package-summary.html#threading">Swing's Threading Policy</a>.
  - Lucene docs should use this since they have awesome package-level docs
    https://lucene.apache.org/java/2_9_0/api/core/org/apache/lucene/analysis/package-summary.html
    org.apache.lucene.analysis

- JIDE has some awesome (feel) open source components; auto-complete, IntelliHints, Searchable (aka FindAsYouType), and SearchableBar (like Firefox), JideSplitButton: PopdownButton with menu; license looks tricky

- WordNet online for inspiration
- https://www.yawni.org/wiki/Main/GettingStarted
  - code inspiration from https://aboisvert.github.com/stopwatch/

+ bug: api: issues with checking out and building yawni
  + data sub-project currently needs my jar signature
  + api depends on data
    - couldn't figure out how to make this dependency <optional>; maybe no project-internal concept exists
  + uncommented WNHOME system property
    + got burned by WordNet version (2.1 vs. 3.0)
    - then got burned by WNSEARCHDIR still referencing old version

~ feature: online: web interface written in Scala + Lift, executing Google App Engine (GAE)
  - re-write in JAX-RS: simpler, more features
    Scalate Jog: JAX-RS + Scala + Guice
    /Users/nezda/Library/Application\ Support/TextMate/Bundles/Scalate.tmbundle
    /Users/nezda/Library/Application\ Support/TextMate/Bundles/scala.tmtheme
    /Users/nezda/code/scala/scalate-1.2/examples/scalate-sample
    * problems with mvn scala:cc
      - https://github.com/davidB/maven-scala-plugin/issues/issue/36
      ℞ prescription take
      ℹ information source
      Å angstrom sign
      ℉ degrees Fahrenheit
      ℃ degrees Celsius
      ℅ care of
      ℇ euler constant
      ℮ estimated symbol
      ℯ script small e
      ℰ script capital e
      ⅇ double-struck italic small e 
      № numero sign
      ℀ account of
      ℊ
      ℗
      ⅄
      ๏•⦾⦿๏⸰⦁‣
  + appid (AppID) candidates ("yawni" not valid, "wordnet" not available)
    + yawni-online
    x yawnionline
    x web-yawni
    x yawniweb
    x webyawni
    x looking for trouble: rename it wordnetnik :)
  + mvn archetype:generate -U \
    -DarchetypeGroupId=net.liftweb \
    -DarchetypeArtifactId=lift-archetype-blank \
    -DarchetypeVersion=2.0-M1 \
    -DremoteRepositories=https://scala-tools.org/repo-releases \
    -DgroupId=org.yawni \
    -DartifactId=yawni-wordnet-online \
    -Dversion=2.0.0-SNAPSHOT
  - gae details
    - test locally with: java_dev_appserver.sh online/target/yawni-wordnet-online-2.0.0-SNAPSHOT/
    - update online version:
      mvn appengine:deploy -Dapp.deploy.projectId=yawni-online-2 -Dapp.deploy.version=2 -Dapp.deploy.promote=True
      ./appengine-java-sdk/bin/appcfg.sh --enable_jar_splitting update rest/target/yawni-wordnet-rest-scala-2.0.0-SNAPSHOT
  - online version features
    - autocomplete
      - show 'hint' text : conflicts with "default focus" behavior :/
      - fade-in/fade-out of suggestions would be slick (like https://loopj.com/tokeninput/demo.html)
      - support tab / shift-tab navigation like TagDragon (and Firefox search widget)
      - decrease lag from 400ms to less
      - should indicate no known matches; could also try 1 additional search using morphological processing
      - suggesting near-hits would be sweet
  + gae error: "sun.misc.SoftCache is a restricted class"
    + need to use alternate softcache impl
      + Google Collections: ConcurrentMap<K, V> map = MapMaker.softValues().makeMap();

  - feature: online: update appengine-web.xml <version> automatically with Maven; then Google App Engine will version our app !
  - yawni.org color scheme: 
    + orange variant #F79910
  - CSS
    + font-size: 16px 
    + line-height: 24px
  - other typography enhancements
    - color - get inspiration from wordnetweb
    - smart double quotes
    - smart single quotes for single quoted items: `foo' → ‘foo’; 's → ’s
    - bullet between examples ; • (using semicolon)
    x "space" bullet (\u00B7 MIDDLE DOT) between words of collocations ; wild-goose·chase ; attack·dog ; hard·cash
      - only occasionally see this used, and often only for phonetic separation
    + italicize examples; gray text (use BluePrint CSS class alt)
    - em dash where apropos
    - rounded corners:
      - this site uses rounded corners a lot: https://scala-tools.org/mvnsites/maven-scala-plugin/
        -moz-border-radius: 14px 14px 14px 14px !important
      - Tapestry has neat REST service for this: https://tapestry.apache.org/tapestry4.1/developmentguide/hivemind/roundedcorners.html
      - use div class showgrid to see the BluePrint grid
        <span style="padding: 14px; -moz-border-radius: 14px 14px 14px 14px ! important; background: none repeat scroll 0% 0% white;">
          <input>
        </span>
        <p/>
        <div id="resultz" style="-moz-border-radius: 14px 14px 0px 0px ! important; background: none repeat scroll 0% 0% white; padding: 14px;">
        </div>
  - design
    + orange background #F79910 (used ColorPicker to get this perfect)
    + white capsule around search box
    + downward facing rounded corners on results
    + issues
      - sense-horizontal-separating bullets are too big (Christine)
      + AJAX active spinner in unusual place
        - maybe closer to search box
      + AJAX active spinner has white background which looks weird on non-white background
        x make it transparent - better to match background colors
        + https://www.ajaxload.info/
      + rounded corners should work in Safari too
      + add search button, if only for aesthetics (searchField activates onBlur anyway)
      + add footer (copyright, etc.)
  ~ links to/from yawni.org
  + meta keywords: WordNet
  - add recent searches on right hand side
    - don't want REST API searches to be shown here

  - REST API can be totally stateless (see Lift example StatelessHtml.scala)
    - David Pollack's advice
      - serialize the forms to JSON and then make an AJAX call on a stable URL
      - new Req.json features will allow easier extraction of JSON from a REST call
        - this combined with disabling the Lift heartbeat should give you stateless support for JSON
    
  - support different versions of WordNet :)
    - should we vary yawni-wordnet-data project version or artifactName ? (or both?)
  - bugs
    + aritfact name is still gae-2.0.0-SNAPSHOT.war ; change to yawni-online-2.0.0-SNAPSHOT.jar
    + timed out issues
      - empty responses returned from timed out sessions
      - entry to "waiting" page is ignored; returns empty result !?
      ! likely only occurs on GAE and is caused by 1 request being serviced by multiple JVMs; LiftSession is not fully stored in servlet session, so this clustered servicing fails to behave correctly
    - rounded corners won't work on IE (5,6,7,8)
      https://www.w3schools.com/browsers/browsers_stats.asp
      ? what about Chrome & Opera ?
    + SLF4J impl collision
    + AJAX page seems to reset when page is left and then revisited 
      x searchField focus issue
      x main evidence is from appspot version of app
      x could local and appspot versions running in different tabs be interacting (via cache or otherwise ?)
      + intentional effect of Lift (Session) Garbage collection (heartbeat driven): can be disabled, but not a good idea
        LiftRules.enableLiftGC = false
    + AJAX active spinner not showing
      x something missing in Boot ?
      + src/main/webapp/images/ajax-loader.gif was missing
      + still doesn't work: had to add default hidden div to default.html
    + Blackbird widget not working (yuicompressor-maven-plugin ?)
      + various problems with xhtml and this widget
    + browser scroll bar causes jarring left/right shift
      html { overflow-y: scroll; }
      https://www.w3.org/TR/CSS21/visufx.html#overflow
  - custom 404 page
    https://wiki.liftweb.net/index.php/Setting_up_a_custom_404_page
  - tests
    - Lift example uses several test libraries: 'specs', 'mockito', jwebunit-htmlunit
    - Selenium tests
    - load tests : JMeter
      - https://code.google.com/p/perfbench/source/browse/trunk/perfbench

- Tapestry on Google App Engine ?

- feature: api: alternate an all caps WordNet term with one with periods after each letter so "CEO" matches input "C.E.O."
  - this article has such an example of "C.E.O.": https://www.nytimes.com/2008/11/23/magazine/23Netflix-t.html?_r=2&pagewanted=all
- feature: api: expose WordNet data version (e.g., 3.0)
- feature: api: expose About dialog diagnostics as Map (code currently inlined in Browser.java; some of this info in browser.Application)
  - maybe should have Application or Module or something in every subproj
+ feature: api: before initial public release, get names right; rename package org.yawni.wn → org.yawni.wordnet ; rename groupId org.yawni.wn → org.yawni; rename artifactId yawni-core → yawni-wordnet-api; rename artifactId browser → yawni-wordnet-browser
+ feature: api: before initial public releease, get names right; rename RelationTarget → RelationArgument (less confusing)
~ feature: api: ⊚ incorporate other related lexico-semantic resources
  - new Princeton "Standoff Files"
    + The Morphosemantic Database
      - adds 1 of 14 semantic types to the existing DERIVATIONALLY_RELATED WordNet relation
        example line:
          <arg1 (verb) sensekey $1>	<arg1 offset $2>	<relationType $3>	<arg2 sensekey $4>	<arg2 offset $5>	<arg1 gloss (abbreviated)>	<arg2 gloss (abbreviated)>
          cannibalize%2:34:00::	201162291	agent	cannibal%1:18:00::	109891079	eat human flesh	a person who eats human flesh
        - 17,739 row; 16,995 sort-uniq'd by sense keys
      * note "offset" has pos ordinal prepended; e.g., in "201162291", leading digit ("2") means VERB, rest ("01162291") is ("cannibalize") synset offset 
        - note: synset offset gets search to right synset, lemma from senseKey required to get to right WordSense
      * distill down to <arg1 offset> <relation> <arg2 offset>; rest is for annotator convenience
          # sense keys and offsets: verb →  noun; 1,077,470 B / 218,758 B gzip'd
          cat morphosemantic-links.xls.tsv | awk -F'\t' '{print $1 " " $2 " " $3 " " $4 " " $5}' | sort | uniq | gzip - | wc -c
          # sense keys and offsets: verb →  noun AND noun →  verb; 2,154,940 B / 324,103 B gzip'd
          cat morphosemantic-links.xls.tsv | awk -F'\t' '{print $1 " " $2 " " $3 " " $4 " " $5 "\n" $4 " " $5 " " $3 " " $1 " " $2}' | sort | uniq | gzip - | wc -c

          # offsets and sense keys: verb →  noun AND noun →  verb; 2,154,940 B / 324,103 B gzip'd
          cat morphosemantic-links.xls.tsv | awk -F'\t' '{print $2 " " $1 " " $3 " " $5 " " $4 "\n" $5 " " $4 " " $3 " " $2 " " $1}' | sort | uniq | gzip - | wc -c
          # only sensekeys: verb →  noun; 737,570 B / 113,004 B gzip'd
          cat morphosemantic-links.xls.tsv | awk -F'\t' '{print $1 " " $3 " " $4}' | sort | uniq | gzip - | wc -c

          # both offsets, both sense keys: verb →  noun AND noun →  verb; 2,154,940 B / 324,103 B gzip'd
          cat morphosemantic-links.xls.tsv | awk -F'\t' '{print $2 " " $5 " " $1 " " $4 " " $3 "\n" $5 " " $2 " " $4 " " $1 " " $3}' | sort | uniq | gzip - | wc -c

          # both offsets, only source senseKey : verb →  noun AND noun →  verb; 2,154,940 B / 324,103 B gzip'd
          cat morphosemantic-links.xls.tsv | awk -F'\t' '{print $2 " " $5 " " $1 " " $3 "\n" $5 " " $2 " " $4 " " $3}' | sort | uniq | gzip - | wc -c

          translate pos + offset + senseKey → pos + offset + synsetWordIdx; 1,055,246 B / 256,753 B
          100003553 unit%1:03:00:: result 201462005 unify%2:35:00::

          30658 unique offset pairs
          * 3332 lost
        * 33990 unique offset+senseKey pairs
          33606 unique offset pairs + source w/ senseKey
          * 384 losts

          # simplest, most efficient solution is to translate sensekeys to format used in WordNet's data files
          #  - see Relation parsing in Relation.makeRelation(final Synset synset, final int index, final CharSequenceTokenizer tokenizer)
          #  - components: 
          #    - synset (offset + POS)
          #    - 'index' within Synset's list of relations
          #    - relationTypeOrdinal (parsed)
          #    - target POS
          15562+5902+2710+2407+1686+1588+1440+1012+628+532+226+172+86+34 = -33985 + 33990 = 5 -- no idea where these 5 went
        - alternate distillation is <arg1 sensekey> <relation> <arg2 sensekey>
          - more readable/verifable
          - how to expose MorphosemanticSemanticRelation ?
            - enums make subclassing impossible 
            - closest existing equivalents are pure-virtual types: MERONYM <- { PART_MERONYM, MEMBER_MERONYM, SUBSTANCE_MERONYM } ...
            - merging them into RelationType and representing them as Relations easiest for users
      - database only contains explicit verb →  noun relations
        ? is inverse implied ?
        ? some verb →  noun instances don't seem to be present ?
          src: breathe%2:29:00::
            →  breather ()
            →  breathing (syn respiration#3 is represented)
          src: respire%2:29:02::
            →  respiration#1
            →  respiration#3
      * could automate XLS "parsing"/interpretation with Apache POI
        - for easy binary search, duplicate each relation forward and reversed (and overall sorted)
          * note these will have to be divided by POS
      - 14 different morphosematic relations
        8158 event
        3043 agent
        1439 result
        1273 by-means-of
         878 undergoer
         813 instrument
         740 uses
         528 state
         318 property
         288 location
         114 material
          87 vehicle
          43 body-part
          17 destination
    - The Teleological Database
      ? presume these are for WordNet 3 ?
      <arg1 sensekey>	<arg1 offset>	<relation>	<arg2 sensekey>	<arg2 offset>
      bomb%1:06:00::	102866578	action	destroy%2:36:00::	201619929
      - 12 different relations
       448 action
       214 theme
       109 result
        77 agent
        57 location
        47 undergoer
        25 instrument
        23 beneficiary
        18 destination
        17 cause
        10 experiencer
         8 source
    + "Core" WordNet
      core-wordnet.txt contains the top (i.e., most frequently used) 4,997 senses
      example line:
        v [clear%2:32:00::] [acquit] clear, pronounce not guilty

      cleanup commands

      cat core.* | tr "_" " " | tr "[:upper:]" "[:lower:]" | egrep '([^%]+).*\[\1\]' -v | wc -l
      cat core-wordnet.txt | colrm 1 3 | sed "s/]//" | tr "_" " " | tr "[:upper:]" "[:lower:]" | egrep '([^%]+).*\[\1\]' -v | wc -l
      
      # add rank as explicit final field 
      cat 5K.clean.txt | sed -E "s/(\[|\])//g" | awk 'BEGIN{i=1} {print $2 " " i; i++; }' | sort -k1,1 > core-wordnet.ranked
      cat 5K.clean.txt | colrm 1 3 | sed "s/]//" | awk 'BEGIN{i=1} {print $0 " " i; i++; }' | sort -k1,1 > core-wordnet.ranked

      5K has 3 duplicates
        + a [available%3:00:00::] [available] obtainable
        + a [whole%3:00:00::] [whole] including all components
        + n [shoe%1:06:00::] [shoe] footwear
   - https://wordnet.princeton.edu/wordnet/download/
     - when were the new "Standoff Files" released ?

  - Geo-WN ; toponym disambiguation
  - VerbNet
  - FrameNet
  - SentiWordNet (crappy non-commercial license)
  - SUMO: mappings https://sigmakee.cvs.sourceforge.net/sigmakee/KBs/WordNetMappings/
  - Collins English Dictionary (CED) old edition available cheaply from LDC ($100); challenging to parse
  - Wiktionary; hard to parse; Ninja Words uses this
  - LDOCE: Procter, Paul (Ed.). 1978. Longman Dictionary of Contemporary English
    - uses a restricted vocabulary of about 2000 words in its definitions and example sentences
  - Roget's Thesaurus (old (i.e., 1900) Project Gutenburg?); JWord uses this
  - The English Tree of Roots (old (i.e., 1900) Project Gutenburg?); JWord uses this

  - GeoSemCor 2.0 (SemCor stands for "Semantic Concordance")
    
  - create tool support for dealing with new data
    - expert query modes will be very helpful, e.g., senseKey
  - will require API flexibility or expansion
    - "soft fields", aka properties, aka name-value pairs: isCore 
    - generic/dynamic RelationType with a "type" field
  - performing mapping/conversion of resources bound to other WordNet versions
    e.g., SentiWordNet is tied to WordNet 2.0 (need 2.0→2.1→3.0)

- interesting homonym
  weakened vs. weekend

- command to make local browser standalone executable jar
  time mci -PuseLog4j,useYawniData,makeShadedJar

- site element notes
  + link to yawni.sourceforge.net (which is linked to yawni.org)
  - add WordNet 3.0 documentation since https://wordnet.princeton.edu seems to be down often
  + Google Analytics include
  + name
  + description
  + project icon
  ~ project features
  + browser features
  + (browser) screenshot
  - examples / getting started
    - strawman WSD system leveraging sense tagged frequencies, "Core" WordNet, Morphosemantic links, lexCats
    - Scala + Yawni = WordNet REPL!
      // rlwrap scala -Xnojline
      alias wnrepl='scala -cp /Users/nezda/.m2/repository/org/yawni/yawni-wordnet-api/2.0.0-SNAPSHOT/yawni-wordnet-api-2.0.0-SNAPSHOT.jar:/Users/nezda/.m2/repository/org/yawni/yawni-wordnet-data/2.0.0-SNAPSHOT/yawni-wordnet-data-2.0.0-SNAPSHOT.jar:/Users/nezda/.m2/repository/com/google/guava/guava/13.0/guava-13.0.jar:/Users/nezda/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9:/Users/nezda/.m2/repository/org/slf4j/slf4j-api/1.6.6/slf4j-api-1.6.6.jar:/Users/nezda/.m2/repository/org/slf4j/slf4j-nop/1.6.6/slf4j-nop-1.6.6.jar'
      // https://stackoverflow.com/questions/9516567/settings-maxprintstring-for-scala-2-9-repl
      - alternative to this manual alias, BUT must specify Xmx via MAVEN_OPTS since can't fork scala console
      mvn -Dscala.version=2.9.2 net.alchim31.maven:scala-maven-plugin:3.0.2:console
      
      :power
      vals.isettings.maxPrintString = 1000000
      import org.yawni.wordnet._
      import scala.collection.JavaConversions._
      val wn = WordNet.getInstance
      // Ctrl+A begin-of-line
      // Ctrl+E end-of-line
      (1 to 1000000).par.map(_.toString) map(wn.lookupWordSenses(_, POS.ALL)) filter(!_.isEmpty) map(_ map(a => (a, a.getSynset.getLexCategory)) mkString(":")) mkString("\n")
      // parallelize :)
      val numberMatches = (1 to 1000000).par map(_.toString) map(wn.lookupWordSenses(_, POS.ALL)) filter(!_.isEmpty)
      numberMatches map(_ map(a => (a, a.getSynset.getLexCategory)) mkString(":")) mkString("\n")
      def timeit(f: => Unit) = { val s = System.nanoTime; f; "%,.4f s" format ((System.nanoTime - s) / 1e9) }
      timeit({ val numberMatches = (1 to 1000000).par map(_.toString) map(wn.lookupWordSenses(_, POS.ALL)) filter(!_.isEmpty) })
      val singleCharMatches = (1.toChar to 65535.toChar). map(_.toString) map(wn.lookupWordSenses(_, POS.ALL)) filter(!_.isEmpty)

      def twoLetterWords(s:Int = 0, e:Int = 127) = (s.toChar to e.toChar).combinations(2).map(_.mkString("")).flatMap(a => List(a, a.reverse))
      twoLetterWords() map(w => ("\"%s\"" format w, wn.lookupWordSenses(w, POS.ALL))) filter{ case (_, senses) => !senses.isEmpty} mkString("\n")

    - list the atomic elements in WordNet
    - list numbers in WordNet
      - has Roman numerals too!
      ? weird that only 1-30 are nouns (with lexCat <quantity>) while of 31-100, only 40,50,60,78,80,90,100 are nouns, rest adjectives
    - normalize integers (adjectives: 1st →  first, ..., 49th, 50th, 60th,..., 100th, ...,  ? 115th, ..., 130th, ...)
      - digits, textual, Roman numerals (* lowercase)
      * limited fraction synonyms ("one-half" = "half", "one-fourth" = "one quarter" = "twenty-five percent")
    - mine for capitalized adjectives and verbs (shows off true case)
    - mine nouns for acronyms and their expansions (USA, U.S.A., AN, WMD, WHO); substring search for "\."
    - mine nouns for name alternations: {Rockefeller, John D. Rockefeller, John Davison Rockefeller}, {Davis, Miles Davis, Miles Dewey Davis Jr.}
    - mine for distinct Words whose lexical form is only different by spaces (e.g., "date line" vs. "dateline")
    - mine for gender information (famous person names, etc.)
    - easiest things in WordNet:
      - single sense words (* with (bad) closed world assumption :))
      - words in core WordNet (* not personally used)
      - 1st senses, especially those with disproportionate max (always max) of sense tagged frequency
    - strawman, ghetto, closed-world-assuming "POS tagger"
      - some form of longest match
      - use basic stop terms
      - ignore initcap terms
      - check case ? ("was" != "WA")
  ~ FAQ
  ~ JavaDoc
  ~ maven info
  - download link
  ~ sourceforge project URL
  + sourceforge icon + URL (for tracking)
  - Amazon Associates book links
    - this site has a link for an Erlang book: https://www.satine.org/archives/2007/12/13/amazon-simpledb/
  + new screenshot of substring search window: https://grab.by/3GWK ; replaces https://grab.by/1Ic4#file.png (before brushed metal fix)
  + donations link / directions / terse plea
  - ohloh link
  - freshmeat link
  ~ pertinent pom.xml project facts
  + Apache license link
  + Princeton WordNet license link
  + issue tracking (Trac or Jira)
  + who we are
    + Luke Nezda
    + Oliver Steele
  - related projects
    - inferior APIs ?
    - Princeton WordNet
    - Apache UIMA
      - has a DictionaryAnnotator
        - requires conversion to an XML format (DictionaryCreator commandline tool provided; provides tokenization options)
        - includes "advanced muli word capabilities", "case normalization" (i.e., case insensitive)
        - "advanced" tokenizer: org.apache.uima.TokenAnnotation // is this jflex-based ?
        - consider implementing InputMatchFeaturePath : baseFormToken with Yawni
      * consider patch to improve copy of the DictionaryAnnotator documentation
        - PDF documentation URL on main page broken
        - spurious "content."
        - not "partOfSpeach", "partOfSpeech" ; spell check!
    - Apache Lucene
- feature: promotion: doc:
  - browser
    - Substring search is like "-grep" option of C WordNet commandline interface 'wn'
      ? what's this called in 'wnb' interface
    + Note that it does not query any of the online versions of WordNet
    + Optionally supports WordNet data file versions 1.5, 1.6, 1.7, 2.0, 2.1, 3.0
  - ssh to sourceforge site
    ssh -t lnezda,yawni@shell.sourceforge.net create
  - follow FEST projects' lead: use pmwiki, ask for Atlassin Confluence, Jira, and Fisheye
    https://www.pmwiki.org/wiki/Cookbook/SourceForgeServers
    + yawni icon URL
      https://yawni.sourceforge.net/yawni_43x48_icon.png
      https://www.yawni.org/images/yawni_43x48_icon.png
      https://www.yawni.org/images/yawni_57x64_icon.png
    + sourceforge icon link
      <img src="https://sourceforge.net/sflogo.php?group_id=36271&amp;type=3" alt="SourceForge.net Logo" class="sflogo" />
    + using Skittlish theme
      https://www.pmwiki.org/wiki/Cookbook/Skittlish
    + added clean URLs
    * how to edit a pmwiki page
      https://yawni.sourceforge.net/pmwiki/PmWiki/DocumentationIndex
      https://yawni.sourceforge.net/pmwiki/Site/SiteFooter?action=edit
(:notitle:)
(:notitlegroup:)
(:notabs:)
    + created Yawni pledgie campaign: https://pledgie.com/campaigns/7717
    + tag lines
      1. Object-oriented API to the WordNet database of lexical and semantic relationships
      2. The commercial-grade WordNet Java API.
      3. The exciting, commercial-grade WordNet API.
    - descriptions
      1. Yawni is a pure Java standalone object-oriented interface to the WordNet database of lexical and semantic relationships. This is the project formerly known as "JWordNet".
      2. Yawni is a pure Java object-oriented interface to the WordNet database of lexical and semantic relationships. This is the project formerly known as "JWordNet".
    - fix page <title>: currently 'Yawni Main/Home Page'
      Yawni / Home
    - make favicon
    - add copyright info to footer (&copy; 2010)
    - enhance indentation of sidebar
    - consider adding/using tabs in addition to sidebar
    - move search box into header ? (above where tabs would be)
    - documentation
      - what's WordNet
      - who might use WordNet ?

  <link rel="shortcut icon" href="https://www.yawni.org/favicon.ico"/>
  <link rel="icon" type="image/x-icon" type="image/vnd.microsoft.icon" href="https://www.yawni.org/favicon.ico"/>

- Apache Pivot
  - Web Start app probably more compelling than applet
    - could add a poll to site
  - Would be cool to download executable, single jar form too 
  - Component Explorer demo could use description area (e.g., Accordion is ...)
  - favorite Pivot stuff
    - ListButton
    - MenuButton
    - Accordion
    - Form
    - ActivityIndicator (OS X indefinite progress / working indicator)
    - FileBrowser
    - Calendar / CalendarButton
    - ColorChooserButton

- issues
  - bug: gui: Linux with GTK L&F: GTK+Swing bug causes major focus problems with text fields
    ? maybe only effects older Gnome versions ? (Centos' Gnome 2.16, but not Ubuntu's 2.30)
  - bug: gui: 'release' → verb → Troponyms; first entry only shows word, not Synset
  x feature: api: Synset.getRelations() List<Relation> could be represented as Map<RelationType, List<Relation>>
    - pro: subsumes getRelations(RelationType)
    - cons: Map requires more memory than List ; Relation is already acting as Map.Entry ; Map has no order ; cannot customize (e.g., HYPERNYM implies INSTANCE HYPERNYM)
  - feature: api: parse glosses / examples
    - option 1: simply break gloss definition(s) part and examples part ; getDefintionChunk() / getExampleChunk() ; approach used by wordnet online
    - option 2: break gloss into chunks (?) and examples into chunks ; this functionality is not provided by other libraries
    - option 3: swallow exceptions of failed parses; provide both options
    - option 4: getGlossesAndExamples()
    * the advanced functions are primarily for use in UIs, and could start out in a utility class (e.g., Descriptions)
  - bug: api: RelationArgument (WordSense and Synset) getDescription() / getDescription(boolean) / getLongDescription() / getLongDescription(boolean) methods are a little contrived; they are essentially for UIs only;  a more flexible impl would allow varying lexfile num, ...
    - Describer / Description / Printer / Renderer / java.util.Formatter / java.util.Formattable / java.text.Format / MessageFormat
    - java.util.Formatter - uses Formattable to allow customization of "%s" rendering ; can be parameterized some with FormattableFlags, int length, int precision
      - could add Formattable to Word, WordSense, Synset, POS, Relation, RelationType, Lexname ; doesn't add much to toString()
    - java.util.logging.Formatter - uses LogRecord
    - made rough outline in org.yawni.wordnet.browser.Searcher
  - feature: api: create commandline tool (à la 'wn') based on Command interface ; consider supporting batch mode or RAFCharStream to minimize init lag
  - bug: api: record "Core" missing senseKeys (gvimdiff core active2.sorted)
  - feature: api: simple commandline utilizing synsets(query) / wordSenses(query) akin to 'wn' (e.g., -grep{n|v|a|r})
  - feature: api: add RelationType support to synsets(query) / wordSenses(query) API à la 'wn' (e.g.,  -ants{n|v|a|r}, -hypo{n|v}, -hype{n|v})
  - feature: api: document advantages of synsets(query) / wordSenses(query) API
    + binary compatible experimental API - doesn't effect those who don't use it
    + reduces API clutter making the overall API smaller & less daunting
  - feature: api: can synsets(query) / wordSenses(query) API be cleanly replaced with a builder pattern-based API ?
    + type safe
    + requires no manual parsing
    -? necessarily more public API commitments
  - feature: api: doc: describe regex term search support
  - feature: api: doc: describe orthographic case features ("true case")
  - feature: api: doc: describe regex gloss search support
  - feature: api: add glob support; translate "*yawn*" → ".*yawn.*"
  ~ feature: api: lookupWordSenses(String someString, POS pos) ; add unit tests; make examples with it
  - feature: api: make stemming optional in lookupSynsets(String someString, POS pos) and lookupWordSenses(String someString, POS pos)
    - currently they combine lookupBaseForms(), lookupWord(), and getWordSenses(): make the lookupBaseForms() part optional (but still on by default)
  - feature: api: coordinate terms (aka sister) terms; nouns or verbs that have the same hypernym (aka 'parent')
    - represent this as a synthetic Relation ?
  + feature: api: add regex support to 'substring search'
  + feature: api: add gloss regex search support ; searchGlossBySubstring
  - bug: api: doc: update Word "substring" search to indicate regex capabilities (and dangers: PatternSyntaxException)
  - bug: api: doc: update gloss "substring" search to indicate regex capabilities (and dangers: PatternSyntaxException)
  + bug: api: added more tests for CharSequenceTokenizer
  + bug: api: substring search incorrectly searching leading license lines of data files; added test
  + bug: api: invalid - just an oddity; values in verb.exc without hits?; about-shipped ; about-shipping; benempt; bird-dogging
  - bug: browser: Maven <profile> inheritance doesn't appear to work correctly: inlining profiles into browser subproject was the only way to create fresh version of the JNLP app with logging dependencies shaded in and proper jar signature
    - if the required profiles are only in parent pom, the following command will report no active profiles
      mvn -Dmaven.test.skip=true  -PuseLog4j,makeShadedJar,makeSignedJar help:active-profiles
      mvn -Dmaven.test.skip=true  -PuseLog4j,makeShadedJar,makeSignedJar clean install
  + bug: api: include Princeton WordNet license in data jar
  - bug: gui: update prompt copy "Type a word to look it up in WordNet..." should Search button be mentioned? (current copy: "Type a word to lookup in WordNet...")
  + bug: gui: after pom refactor, window title is "Yawni Parent Browser" :)
  + bug: gui: after pom refactor, About dialog application title is "Yawni Parent Browser"
  - feature: gui: ⊚ add URL to About dialog; make sure it is mouse select+copyable or clickable or both
  + feature: gui: add icon to About dialog
  - feature: promotion: ⊚ contact known users of other Java WordNet clients with targeted announcement
    * email Revelytix and ask them what they use
    * email Cognition and ask them what they use
    ? email JWNL and ask them to hang it up ? :)
    - create twitter account: yawni is currently a spam Twitter account; reported as spam
    - Freshmeat
    - Ohloh: I Use This
    - SourceForge reviews
    - announce on personal twitter account
    - announce on wordnet mailing list
    - Linas Vepstas: OpenCog / ReLex
    - Sean Adams
    - Kirk Roberts
    - Bryan Rink
    - Rion Snow
      - The Stanford WordNet Project
      - https://ai.stanford.edu/~rion/swn/index.html
    - opennlp
      - mailing lists
      - annotation.org
    - GATE mailing list
    - UIMA mailing list
    ? Lucene mailing list ?
  + feature: promotion: point yawni.org at SourceForge site
  ~ bug: promotion: ⊚ update SourceForge site (add download, no longer beta, Maven info, ...)
  + feature: promotion: add PmWiki-based content to SourceForge site: basic documentation, basic examples, some color
  + feature: promotion: make Wiki-based homepage the default landing page for https://yawni.sourceforge.net (like https://jwordnet.sourceforge.net)
  - feature: promotion: ⊚ ask Oliver Steele to update project members (i.e., remove Kurt Hayes)
  - feature: promotion: ⊚ have Princeton update the JWordNet link on https://wordnet.princeton.edu/wordnet/related-projects/
  - feature: promotion: ⊚ Amazon Affiliate sponsored links
    ? any Semantic Web books apropos here ?
    - WordNet: An Electronic Lexical Database (book) https://www.amazon.com/WordNet-Electronic-Database-Language-Communication/dp/026206197X/ref=sr_1_1?ie=UTF8&s=books&qid=1261949881&sr=8-1
    - Word Sense Disambiguation: Algorithms and Applications (book) https://www.amazon.com/Word-Sense-Disambiguation-Algorithms-Applications/dp/1402068700/ref=sr_1_1?ie=UTF8&s=books&qid=1261949949&sr=1-1
  + bug: use consistent URL in documentation, etc.
    https://sourceforge.net/projects/yawni/ -- SourceForge standard page
    https://yawni.sourceforge.net/ -- looks spammy with ad in the center
  ~ feature: promotion: gui: add Web Start app link to main page
    - make sure it works on Linux from Firefox ; see what others do
  - feature: api: ⊚ publish to public Maven repositories
  + bug: api: report more useful exception than NPE when data cannot be found (i.e., not in classpath, $WNSEARCHDIR, or $WNHOME); currently, exceptions look like: java.lang.IllegalArgumentException: no stream for noun.exc
  - bug: api: ⊚ $WNSEARCHDIR/$WNHOME environment collison(s) would be confusing to debug; document this
    - feature: api: determine WordNet version at runtime; compute signatures for known versions; key file lengths; key file MD5 sums
  + bug: api: if $WNSEARCHDIR and/or $WNHOME defined, overrides the data jar; apparent when they point it at a real WordNet 2.x dict/ dir (causes test failures)
    * notes from FileManager.getFileStream(String filename, boolean filenameIsWnRelative)
    if YAWNI_USE_JAR, try the jar
      sys prop to guarantee using the jar to prevent weird application-level WN data version mismatches
      - sysprops and environment variables create security issues
      - XXX should this be the default ?
    else if WNSEARCHDIR (or WNHOME) are defined, use them
    - benefits: mmap'd FileChannel requires less memory and inits faster
      - allows simple WN data version changes
    else try the jar
    - zero environment dependencies
    
    What behavior should we use if SecurityException is thrown?
    - this would invariably mean reading local environment variables and arbitrary files from disk was also prohibited so jar is only solution 
    How can we test behavior in a sandboxed environment ?
    
    If we read from jar, do we need user to trust our application at all?
    - may not even need signing in this case - data also delivered as a 
      (8.7MB) jar so not even network reads required)
    
    How can we test behavior in the sandboxed, high security environment?
  + bug: api: gui: default build data/ and use it for unit tests in core/ and browser/ to sidestep environment issues and work in IDEs
  - bug: api: gui: ⊚ add basic Getting Started documentation including slf4j requirements; copy / reference Apache Mina docs on same: https://mina.apache.org/logging-configuration.html
  - bug: api: decrease unit test Xmx -- 256m is excessive; note that base cache sizes form a minimum required memory (esp. if they are filled)
    - 4 active: DEFAULT_CACHE_CAPACITY=10000 (morphyCache, synsetCache, indexWordCache, exceptionsCache)
      - these can easily get fairly large and capture 
  - feature: api: consider public API addition: List<String> getExceptions(CharSequence someString, POS pos)
  + bug: api: include Princeton WordNet license in data subproject !
  < feature: gui: consider left-aligning button/searchField pod; Muller OS X WordNet does this
  - feature: gui: for RelationType dropdowns, consider implementing UI guideline of keeping same set of menu items, but only enabling apropos ones - helps user learn; Muller OS X WordNet does this
    - don't want meta-relations (e.g., MEMBER_MERONYM)
    - only want those RelationTypes applicable to the particular POS
  + bug: api: for Noun "Roman", what yawni calls "Member Meronyms" , wnb calls (Member) Holonyms ("MEMBER OF"); currently have "mero"="#" and "holo"="%" ; doh! wn.h says "mero"="%" and holo="#"
  - feature: gui: typeahead find in Relation PopdownButton menu could support substring "smart" search (e.g., "holo..." in "Member Holonyms"; maybe like QuickSilver's algorithm?)
  + bug: gui: fix UI copy for "The noun kitten has 1 sense (first 1 from tagged texts)"
  < feature: gui: promotion: splash screen would be nice during download and boot; great place to showcase new icon!
  + bug: api: Word.getRelationTypes() sometimes returns an incorrect values for lexical relations (e.g., INSTANCE_*, DERIVATIONALLY_RELATED)
    hypocrite; thinks it has DERIVATIONALLY_RELATED, but this doesn't only applies to other WordSenses in its Synset;
    ? something's not working right:
      palatine (Roman official)
        Roman
  + bug: gui: ADJ Derivationally related forms shows 4 entries, should only be 2; not respecting WordSense-level of the relationship
  + bug: api: gui: "hypocrite" shows derivationally related forms menu option, but nothing shows up (turns out this is correct!)
  + feature: gui: use SwingWorker in preload (ditches explicit Threads, but requires Java 6 (sort of))
  - feature: gui: use SwingWorker in ConcurrentSearchListModel (ditches explicit Threads, but requires Java 6 (sort of))
  - feature: gui: use simple <span> and some CSS (rules) to modify rendering in resultEditorPane; ideally, controllable from properties file
  + feature: gui: add smart quotes to text of statusLabel prompt to reflect its showing the entered text, e.g., "Overview of roman" → "Overview of “roman”"
  + feature: gui: use dominant case for relation summary copy: "Applies to 4 of the 4 senses of roman" → "Applies to all 4 senses of Roman" (ADJ "roman" → "Derivationally related forms")
  + feature: gui: tweak relation summary copy when numApplicableSenses == senses.size()
    - 3 cases
      Applies to 1 of the 1 senses of George W. Bush
        Applies the only sense of George W. Bush
      Applies to 2 of the 2 senses of George Bush
        Applies to both senses of George Bush
      Applies to 4 of the 4 senses of Roman
        Applies to all 4 senses of Roman
        * similar for 3+
  < feature: api: add alternation support to GetIndex for {' ' → '/', '-' → '/'} (e.g., "read write memory" → "read/write memory")
  < feature: api: add information on Unicode characters (e.g., '→' U+2192 RIGHTWARDS ARROW; see gloss of "tilde" and https://rishida.net/scripts/uniview/ for ideas) 
    - would these be gloss? synonyms ?
    - would be cool, for example, to have:
      - suggested usage of smart quotes (“”)
        " as alternation for “
        " as alternation for ”
      - "therefore" as alternation for ∴ (maybe even ∵ as antonymn); would either of these work to help describe/render WordNet relation entailment ?
      - "Esc" as alternation for ␛
      - "Backspace" as alternation for ⌫
      - "Enter" as alternation for ↩
      - "Tab" as alternation for ⇥
  x bug: gui: SearchFrame substring search fails to find any matches with '/' (e.g., "read/write memory"); " " (space) works;
    + this works; should add gui test
  < feature: api: gui: use custom XML format internally and render it to HTML in a custom EditorKit; XML format can be used in multiple places
  < feature: gui: add Safari / Preview-like highlighting-current panel search (⌘ +F); Safari dims screen, temporarily adds search nav bar; impl similar to wavy red underline ?
  + bug: api: upgrade poms to build (including unit tests!) in any environment and test this (no jarsign resource, no data jar, WNHOME, WNSEARCHDIR set, etc.)
    - if yawni-data is not available, fall back to WNHOME, 
      if WNHOME is not available, report useful error
  + bug: api: Morphy's morphprep() has some useful looking logic short circuite; easiest fix is to check some examples against C version's output
  - feature: api: test: check some values against C api for correctness; need to make either a wnb harness or C code; both pain to impl
  - feature: api: false-positive tests: generate random collocations and prepositional phrases and see if they 1) produce stems 2) are in WordNet
  < feature: gui: use web-start friendly preferences; this is hard
  ~ feature: gui: use TextPrompt to display "No matches found."; non-stanard because searchField will not be empty for this case
  < feature: gui: use custom ListCellRenderer to implement properly-cased display in SearchFrame
  - bug: gui: needs_test: fix rendering of key bindings on menus (not Control+N, ^+N)
  + bug: gui: Undo and Redo menu icons are too big! also, crop the wasted edge space out of the source .pngs
  - bug: gui: on Windows, alt-F4 should close windows, not Ctrl+W
  + bug: gui: register UncaughtExceptionHandler to avoid silent exception swallowing; show a dialog
  + bug: gui: search for "performant", result pane shows single bullet (status shows "No matches found"); caused by weird leak/bug/issue in JEditorPane + DefaultStyledDocument
  + bug: gui: leak in JEditorPane / DefaultStyledDocument; solution add a clear() method
  ~ feature: informal poll of Mihai (Snow Leopard) and Richard to see what version of OS X they have (Tiger, Leopard, Snow Leopard?)
  - feature: gui: should clearing searchField automatically clear previous result set ?
    - at least disable controls ? (like POS dropdowns)
  - feature: gui: "placard" (not BottomBar) which shows adjustable (font) zoom level, etc.
  < feature: gui: View menu / dropdown somewhere for advanced options; is this too advanced to make so available to regular user, e.g.,
    Show/Hide Glosses
    Show/Hide Example Sentences
    Show/Hide Synset Offsets (aka Database Locations)
    Show/Hide Frequency Counts
    Show/Hide Lexical File Info
    Show/Hide Lexical File Numbers
    Show/Hide Sense Keys
    Show/Hide Sense Numbers
    Show/Hide Core WordNet Rank
    Show/Hide WordSense Antonyms
    Show/Hide WordSense AdjPosition
  + feature: gui: in search fields (or corresponding results area), use TextPrompt to show basic directions (like OS X Dictionary used to?); https://tips4java.wordpress.com/2009/11/29/text-prompt/
    * verify with author that Apache License is OK ?
    - text "Type a word to lookup in WordNet…" requires more width in searchField than we have
    - doesn't work in combination with OS X features (but does look  kinda cool, if a little textually busy)
      searchField.putClientProperty("JTextField.variant", "search");
      searchField.putClientProperty("JTextField.Search.CancelAction"...
    - we already have a similar prompt in our "status bar"
    - maybe searchField focus should control resultEditorPane content ?
    - italics, medium alpha
    - may be better to put prompt 1/4 or 1/5 from top in results area; OS X Dictionary says

      Type a word to look up in… (horizontally centered, gray-ish/alpha, normal, serif font, ≈2x normal size (plenty of room))
      New Oxford American Dictionary (horizontally centered, gray-ish/alpha, italics, serif font, ≈2x normal size (plenty of room))
  - feature: gui: rename ActionHelper to StyledActionHelper or something; factor all similar code into it (or it into similar code), i.e., StyledTextPane
  - feature: api: refactoring: consider optimizing CharSequences.parseInt/parseLong (à la https://nadeausoftware.com/articles/2009/08/java_tip_how_parse_integers_quickly)
  < bug: gui: SearchFrame dialog should render with apple.awt.brushMetalLook on OS X (Apple bug)
  - feature: gui: bundle as native OS X app; https://mojo.codehaus.org/osxappbundle-maven-plugin/
  + feature: gui: add prefix-typing navigation of PopdownButton content (like JComboBox)
    - DefaultKeySelectionManager
  - bug: gui: OS X: app bar says "com.sun.javaws.Main" instead of "Yawni WordNet Browser"; clearly missing -Xdock:name="Yawni WordNet Browser"
    - OS X Java Web Start bug: JnlpxArgs.getArgumentList: Internal Error: remaining custArgsMaxLen: -1110 < vmArgsPropertyStr.length: 72 dropping vmArgsPropertyStr
    - interesting alternative syntax: 
        <param name="java_arguments" value="-Djnlp.packEnabled=true">
      ? what JNLP version added this ?
  + bug: gui: OS X: if app window focus changes while a PopdownButton JPopupMenu is showing, it stays above ALL other application windows ! known bug; only affects heavyweight popups which OS X uses exclusively
    - https://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4812585
  - bug: gui: OS X: when selecting POS button, focus is not explicitly on "Senses"
  < feature: gui: OS X using reflection, ala OSXAdapter, override handleQuit(), handleAbout()
  + bug: gui: OS X search field (x) no longer works (searchField.putClientProperty("JTextField.variant", "search");) ; fix searchField.putClientProperty("JTextField.Search.CancelAction", Action...
  < feature: gui: require zero Java Web Start permissions (no preferences saving)
  - feature: gui: count and display how many Word or WordSense hits for "inherited" searches
  - bug: promotion: ⊚ add nice high res project icon (design one :)
    - what are typical icon sizes ?
      * 512×512 pixel image (for Finder icons in Mac OS X v10.5 and later)
      * 128×128 pixel image (for Finder icons in all versions of Mac OS X)
      * 32×32 pixel image (hint for Finder icons)
      * 16×16 pixel image (hint for Finder icons)
      * 48x48 pixel image (used by SourceForge)
      * A mask that defines the image’s edges so that the operating system can determine which regions are clickable
    - icns file for OS X ?
    - scoured Interfacelift, found Bombia Design and asked for a quote
      To whom it may concern:
      I am the primary developer of the open source project "Yawni" (Yet Another WordNet API) (https://sourceforge.net/projects/yawni/), a graphical and programmatic interface to WordNet  (https://wordnet.princeton.edu/).  I have been working hard on both the "back end" and UI of the project and even have a concept for an icon.  My concept is a yawning cat (I like this one: https://www.joua.net/paddington/yawn.jpg), possibly vectorized à la vectormagic.com.  I found your portfolios via Interfacelift and was curious what it would cost me to have you create a scalable icon for the project. Obviously I don't have much to spend on this free and open source project, but I think a memorable icon is an important way to promote a project.
      Kind regards,
      - Luke
      Dallas, Texas, USA
    + experimented with some variants of the Paddington image on vectormagic.com
    + emailed webmaster hosting Paddington image
  + bug: api: doc: note that stems are true case in DictionaryDatabase#getLemma()
  + feature: gui: support multiple independent, concurrent Browser frames (OS X style "Multi Document Interface(MDI))
  + bug: api: can't find "'s Gravenhage" in gui ; BloomFilter hashcode considered case and space != underscore; added Hasher interface
  - feature: api: doc: file:///Users/nezda/President%20of%20the%20United%20States.svg
  ~ feature: api: in Word, consider caching senses since it is Iterable on it; getSense(n) should be cheaper; consider reversing this "optimization"/
  + feature: api: get tests to run from within Netbeans (possibly with Maven test scope dep on data subproject?)
  - bug: api: ⊚ Morphy + Synset-searching torture test (! including POS.ALL AND collocations !)
  + feature: ditch inefficient LookaheadIterator for Google Collections AbstractIterator
  < feature: gui: inherited meronyms not shown in GUI drop down; these are indirect via hypernyms (e.g., "capacity"#3's hypernym "volume" has direct meronyms)
  + feature: api: add BloomFilter anti-match optimization to lookupWord(String lemma, POS)
  + feature: api: add BloomFilter anti-match optimization to other methods (e.g., getExceptions()); trickier for Morphy/lookupBaseForms()
  + bug: api: fix BloomFilter issue with non-String CharSequence hashCode (feature)
  + feature: api: make Synset.getGloss() lazy/optional value - read & parse on demand; saves tons of RAM!
  - bug: api: ⊚ do not depend on default platform character encoding; mainly effects Unicode input like "résumé"; reading WordNet data files should be ASCII, reading UI should be UTF-8
  + bug: gui: factor into new browser subproject
  < feature: start "new browser" remote branch -- JSplitPane-based, maybe LGPL dependencies
  ~ bug: gui: needs_test: CTRL+W doesn't close (hide) Substring Search window on Linux; weird: have to listen for  (0x17, etb: end of transmission block)
  ~ feature: api: tolerate not having data.<POS> files (i.e., only index.<POS> files) to allow use as a resource-light, data driven stemmer
    - this may "just work"
  - bug: gui: substring search keyboard focus skips Substring/Prefix radio button group
  + bug: gui: main AND substring search frames open, moving one frame to another desktop should move the other ∴ JDialog
    Old English: 
    - this behavior is called a dialog ("modal" means the dialog must be dismissed before the main screen is available for use again)
      - Apple fail: JDialog doesn't respect apple.awt.brushMetalLook !
      - JWindow respects apple.awt.brushMetalLook, but has no native close or resize controls
        - thought about slide out drawer, but apparently this is hard (https://forums.java.net/jive/thread.jspa?threadID=30506)
        - swingx JXCollapsiblePane could be nice solution -- essentially frame-internal drawer / JSplitPane with slide / fade effects
    ? why doesn't drag-from-non-menu-bar move app to another desktop ?
  + bug: gui: jnlp version doesn't use apple.awt.brushMetalLook
    - 99% fixed -- client property, not system property (for jnlp)
      getRootPane().putClientProperty("apple.awt.brushMetalLook", Boolean.TRUE);
      - introduced some code duplication
      - where should related properties go?
  + feature: gui: text boxes should just ignore slash (there's none in WordNet anyway)
    + update scrub in org.yawni.wn.browser.SearchFieldDocument
    + SearchFrame was missing: this.searchField.setDocument(new SearchFieldDocument());
  < feature: cross reference and index Wikitionary
  ~ feature: api: make code 'sandbox' compatible (e.g., Google App Engine (GAE), 80legs)
    + need to catch security exceptions when attempting to inspect user environment and 
      system properties
    + non-gui, classes not on GAE whitelist
      - java.nio.MappedByteBuffer
        - FileManager.NIOCharStream#asByteBuffer()
          InputStreamCharStream (NIOCharStream subclass) avoid this requirement and is the current default
    + java.util.prefs.Preferences (and - java.util.prefs.InvalidPreferencesFormatException)
      - static preferences references should be limited to the GUI classes
        - only used in browser - not a problems
    - need test app in GAE
  - bug: api: why do some relation types have mixed lexical and semantic instances - wnb seems to always present these as semantic (i.e., synsets)
    - DOMAIN_OF_x / MEMBER_OF_x_DOMAIN
      - "trademark"
    - SEE_ALSO (phrasal verb)
    - 1 instance of VERB_GROUP ("bear"2/14)
  - bug: several relation types don't render correctly/informatively in the browser (e.g., VERB_GROUP)
    - VERB_GROUP (example "turn")
  - bug: search for "LN added"'s

- feature: api: doc: highlight WordNetLexicalComparator and describe where you might use it
< feature: api: consider GetLemma interface
  + bug: api: rename Word.getLemma() → getLowercasedLemma() - not the same
    - XXX beware: changing getLemma()'s behavior will break code! must update it to getLowercasedLemma()
      - do NetBeans rename refactor, then add new method
+ feature: gui: show cased getLemma() for single case Words (e.g., "Al Capone") in various messages; there are only equalsIgnoreCase() contracts in place here
- more unit tests
  - bug: api: ⊚ at least 1 simple example; maybe some searching examples (à la JWNL  findRelationships())
    - story of 2 works finding their parent...
    - story of a word and all its children...
    + WNSTATSGenerator
  - bug: api: test: add torture test outlined in Searcher (resursive parents / children)
~ feature: api: ⊚ add expert query modes: attempt to integrate these without adding API cruft (e.g., little language / "magic" strings ?)
  * trickiest part is any attempt at type safety (could always go java.lang.Object) unless we just add a bunch of overloaded methods or some kind of visitor
  - (was feature: type/property search / filter)
  - use modal initiated with leading "?" (URI query delim) and named parameters - intuitive, readable, and flexible going forward
    - this only makes sense if it is part of existing query methods
      public Word lookupWord(CharSequence lemma, POS pos);
      //public String lookupBaseForm(POS pos, String derivationLemma);
      public List<String> lookupBaseForms(String someString, POS pos);
      public List<Synset> lookupSynsets(String someString, POS pos);
      public Iterable<Word> words(POS pos);
      public Iterable<Word> searchBySubstring(CharSequence substring, POS pos);
      public Iterable<Word> searchByPrefix(CharSequence prefix, POS pos);
      public Iterable<Synset> synsets(POS pos);
      public Iterable<WordSense> wordSenses(POS pos);
      public Iterable<Relation> relations(POS pos);
      public Iterable<Relation> relations(RelationType relationType, POS pos);
  
  // maybe just a couple really generic methods ?
  // Iterable<WordSense> wordSenes(String)
  // Iterable<Synset> synsets(String)

  <POS>#<synset_offset> → Synset; optimized
  <POS ordinal><synset_offset> → Synset; optimized

  <POS>#<lemma>#<sense_number> → WordSense; optimized
  <POS ordinal><synset_offset>#<lemma> → WordSense; optimized
  // sanity check compatibility of the given combo (since senseKey is sufficiently precise by itself)
  <POS ordinal><synset_offset>#<senseKey> → WordSense; optimized
  <senseKey> → WordSense; optimized

  // already in current API; maybe remove to simplify it
  <POS> → Iterable<Synsets>; linear traversal
  <POS> → Iterable<WordSense>; linear traversal
  <POS> → Iterable<Word>; linear traversal

  <prefix> → Iterable<Word> ** Iterable<WordSense> if case sensitive; optimized
  <suffix> → Iterable<Word> ** Iterable<WordSense> if case sensitive; linear traversal
  <regex>  → Iterable<Word> ** Iterable<WordSense> if case sensitive; linear traversal
  <glob>   → Iterable<Word> ** Iterable<WordSense> if case sensitive; linear traversal
    - glob-style regexes (e.g., "*" means ".*", "p*za")
      https://jakarta.apache.org/oro/api/org/apache/oro/text/GlobCompiler.html
      https://stackoverflow.com/questions/1247772/is-there-an-equivalent-of-java-util-regex-for-glob-type-patterns
      tricky to "guess" when to do this without shorting out more complex regexes
      - if anchored (^ or $), don't guess - we've got a pro
      - if ".*", don't guess - we've got a pro
      - if ")*" or "]*", don't guess - we've got a pro
      - remove leading/trailing "*" - don't change result
  <lexname> → Iterable<WordSense> (ideally, report error for undefined lexnames (easiest if it were an enum)); linear traversal
  <AdjPosition> → Iterable<WordSense> (only applies to POS.ADJ); linear traversal
  <RelationType> → Iterable<Relation>; linear traversal
  <glossSubstring> → Iterable<Synset>; linear traversal
    - gloss grep (brute force, stemmed) -- little crazy as this approaches a general IR problem (i.e., use Lucene)
  <random POS/Word/WordSense/Synset>
    - good for unit tests and performance tests or "Synset'o'the'day"
    T random(rand, Class<T> clazz) // no good common bounds for clazz (except maybe package is org.yawni.wn)
    - random Synset implemenation: random POS; random offset; pick closest Synset
    * useful feature would be realistic skews (e.g., more common POS (NOUN), unigram vs. collocation, higher senseTaggedFrequency)

  <custom output format>  e.g., https://www.w3.org/TR/wordnet-rdf/
   - activate outputting specific fields (e.g., synset offset, lexname, isCore, ...)

- customize rendering
  - use custom EditorKit which "knows how" to render various yawni primitive types (e.g., Synset, WordSense, Relation, Word, ...)
  - add methods to generate a standard XML form of the various yawni primitive types,  then use XSLT to generate XHTML for rendering
  * already have crude "rendering pipeline" which converts yawni primitives to HTML
    - displayOverview()
      - displaySense(Word)
        - appendSenses(Word, buffer, false);
    - displaySenses(Word word)
      - appendSenses(word, buffer, true);
    - displaySenseChain(Word word, RelationType relationType)
      - appendSenseChain(StringBuilder buffer, WordSense rootWordSense, RelationArgument sense, RelationType inheritanceType, RelationType attributeType)
        - appendSenseChain(StringBuilder buffer, WordSense rootWordSense, RelationArgument sense, RelationType inheritanceType, RelationType attributeType, int tab, Link ancestors)
    - displayVerbFrames(Word word)
      

  * many of these are just filters which require exhaustive iteration
    - these only make sense in substring SearchFrame setting (since its not stemmed)
  * results sets can easily be large, so incremental display would be nice
    - SearchFrame / ConcurrentSearchListModel shows List/Iterable<Word> this way
    - seems easier in a commandline or web app
  * result sets can be of many different types ({Word, Synset, WordSense, LexicalRelation, SemanticRelation} x {scalar, Iterable<T>})
- feature: api: design a useful Visitor API and implement it with TreeIterator
- bug: doc: note that Substring search will NOT search inflected forms in some kind of documentation?  maybe it should try these if it has no matches ?
x bug: gui: when going back and forth between Search and Substring search
  ? what happens ? not sure what this meant
- feature: api: gui: factor static, non-public inner classes out (simpler?)
  - FileManager: *CharStream
+ bug: gui: "Pertainym" word/label not actually shown, meaning demonstrated via example, e.g.,  "...are nouns related to viral"
  ? maybe change "related to" to pertaining to"?
~ feature: api: gui: informative About dialog for debugging
  - would be good in both a commandline and gui browser
  - colorize red if WNHOME not readable
  - data-in-jar
  - the core logic of this belongs in FileManager
  
  - lifecycle of objects
    FileBackedDictionary.getInstance()
      instance = new FileBackedDictionary()
        new FileBackedDictionary(
          this.FileManagerInterface = 
            new FileManager()
            )
              getFileStream(...)

      ? maybe expose the FileManagerInterface we're using ? might open up Thread safety issues ?
x feature: implement Set<Word> interface ; while they will always be unique, List is more efficient
< feature: adaptive compressed form - gradually parse to "preparsed" form
- feature: gui: use appassembler to generate scripts
  - WNHOME
  - JVM args
~ bug: api: switch to slf4j (more library friendly?)
  - feature: api: add Maven profiles for various logging configs (log4j.properties, slf4j-nop, etc.)
    log4j: enable log4j logging handler
    jul: enable java.util.logging log handler
  + bug: api: provide reasonable default logging configuration; shaded jar is weird;  don't want this junk to be seen;
    default: noop
    log4j:WARN No appenders could be found for logger (org.yawni.wn.FileManager).
    log4j:WARN Please initialize the log4j system properly.
  - setup pom to take advantage of this debug tracing using a profile
  + set up a log4j.properties file
    - programmatically refer to this properties file so we don't have to set system property
  - convert web start stuff (shaded jar)
    ? does shaded jar "hide" embedded jar
  - reference Lucene dev thread and slf4j list of Apache projects for rationale
    - markmail perma link: 
x feature: howto for developing in NetBeans ?
+ feature: package-info.java / overview.html
+ bug: LICENSE.txt, NOTICE.txt, README → README.txt
< bug: gui: GTK theme: width of POS dropdowns is (much) different when there are no results for a given POS
  * that's the only issues with that theme! :)
+ bug: address/check any closed bugs of JWNL
~ bug: gui: remove junk trace output in GUI
~ bug: gui: switch everything over to Command + F (in addition to slash '/') - document this change
+ bug: remove totally experimental crap from release (Scala, ...)
+ bug: gui: SearchFrame POS popup not receiving any keyboard input ; depending on how it is selected, input continues to go directly to searchField
~ bug: gui: audit UI and functionality; compare to wnb, WordNet Online, OS X Dictionary, etc.
  - compare to wnb - color, history, help, redisplay overview button, specific-sense filter
  - compare to WordNet online - color
  - compare to OS X Dictionary - history, color and font variation, font size buttons, right-click menus, option-click search from defintion
- feature: show "generic frame number" in interface ? (these are for experts)
+ feature: cache WordSense getSensesTaggedFrequency()
- bug: doc: document that we don't do Serialization (use sense keys ?)
< bug: words with more than 1 distinct baseform (e.g., "bases") (not to be confused with words with "more than 1 'stem'" (e.g., "was"))
  - "bases" has 2 bases (aka baseforms): "base" and "basis" yawni shows "basis", then "base", but wnb shows the opposite
    - "base" has 19 senses
    - "basis" has 3 senses
    * this order happens to be alphabetical
    ? maybe wnb orders by decreasing polysemy ? (that'd be cool ?) alphabetical ? (likely)
  - "wound" VERB
    "wind" has 7 senses
    "wound" has 4 senses
    * this order happens to be alphabetical
  - "axes" NOUN, "ax", "axis", "Axis"
  - "saw" VERB, "see", "saw"
+ feature: Setup Trac (like Cyberduck uses) as sourceforge "Hosted App"
< feature: remove singleton stuff ? (i.e., FileBackedDictionary.getInstance())
- feature: consider a "lexicon" class for simple uses (like stemming)
- feature: consider test / example coverage
  - Ruby WordNet has some decent looking "examples/" and tests (linguawordnet)
    https://www.deveiate.org/projects/Ruby-WordNet/browser/examples
    source:trunk/tests/wntestcase.rb
    source:trunk/tests/linguawordnet.tests.rb
    source:trunk/tests/synset.tests.rb
    source:trunk/lib/wordnet/synset.rb
    source:trunk/lib/wordnet/constants.rb
    source:trunk/lib/wordnet.rb
    source:trunk/examples/clothesWithCollars.rb
    source:trunk/examples/clothesWithTongues.rb
    source:trunk/examples/hyponymTree.rb
    source:trunk/examples/holonymTree.rb
    source:trunk/examples/meronymTree.rb
    source:trunk/examples/domainTree.rb
    source:trunk/examples/memberTree.rb
    source:trunk/examples/addLacedBoots.rb
    source:trunk/examples/distance.rb
    source:trunk/examples/hypernymTree.rb
    source:trunk/examples/gcs.rb
+ feature: api: read data files from jar
  ? what test cases remain?
  + use subproject to build this (data only 8.6MBMB zipped!)
  + URL+ByteArrayInputStream CharStream implementation 
    + could create a ByteBuffer or a byte[] directly
    + load data files from InputStream(s) (from jar) (loading from web via web start would be sweet too)
    - final ReadableByteChannel channel = Channels.newChannel(Class.getResource().openStream());
    + make this a separate jar file (data subproject)
+ bug: api: morphy shouldn't produce results which cannot be found in WN for that POS (* unless they are from the exceptions file)
  + bug: (data bug) search failures? in lookupSynsets()
    * contrast these to "geese" / "goose" which works
      [fedayee, fedayeen] NOUN - backwards in exc file 
      [aciculum, acicula] NOUN - search for "acicula" works, but "aciculum" fails?
      [furculum, furcula] NOUN - backwards in exc file  
    - also seems to happen for [cathar, cathari, Cathari] NOUN
    * looked like multi-stemming bug (N wounds → N wound → N wind)
    ? are these issues all related to exceptions ?
  + bug: api: noisy, scary logging in lookupSynsets()
+ feature: api: T[] → List<T> API improvement - use NetBeans to do this
  - key here is ImmutableList<T>
    - Collections.emptyList()
    - Collections.singletonList(T) - more space efficient
    - if this is an interface and all construction is limited to factories,
      we can have consistent source for super-compact specializations (size 0,1,2,3)
      - look at EnumSet API
    - subclass ArrayList - override set(), remove(), clear()
      - tiny memory inefficiency from AbstractList (or AbstractCollection?):
        modCount field used for fail-fast not needed for immutable
        * note, this is probably soaked up by Object padding anyway (goes in 8 B chunks)
      - space usage for empty:
        - 32-bit:
          - Object: 8
          - T[] ref: 4 (would be padded to 8, but for modCount)
          - T[] object (sizes 0 and 1): 16 (sizes 2 and 3: 24, sizes 4 and 5: 32)
          - int modCount: 4
          * sum: 8 + 4 + 16 + 4 = 32 B
        - 64-bit:
          - Object: 16
          - T[] ref: 8
          - T[] object: 24
          - int modCount: 4 (probably padded to 8)
          * sum: 16 + 8 + 24 + 4 = 52 B (probably 56 B)
    - minimal memory form 
      * significant memory win - why didn't Google Collections do this ?
      * similarly ImmutableSet could be made - brute force small sets, HashSet field the rest?
      * TRICKY PART: make sure the hashCode(), equals(), and toString() methods match util.Collection
      ? provides decent way to use arrays as HashSet keys ?
      ? how can we create specialized form that is Comparable<T> iff T is Comparable ?
      - 32-bit
        - Object: 8 (therefore empty probably 8)
        - 1 T ref: 4 (therefore, singleton probably 16 with padding)
        - 2 T ref: 4 (therefore, doubleton 16
        - 3 T ref: 4 (therefore, tripleton probably 24 with padding)
        - 4 T ref: 4 (therefore, quadrupleton 24)
    - ideally there'd be a marker interface like Immutable 
      - org.apache.commons.collections.Unmodifiable
      - note that Collections.unmodifiableList(list) can change IF list is changed elsewhere
        - this could prove quite confusing!
    - look at Google Collections impl - looks very simple - contains size and offset fields and 
      disallows null members which seems crazy? (not general) forgot RandomAccess marker interface
+ feature: gui: make bullets look better 
  - list-style: url... .gif
  - anti-aliasing (doesn't fix size, but far less jaggy looking)
+ feature: api: POS.ALL search support (esp for stems) - use Uniq to populate this
  + lookupBaseForms()
  + Synset[] lookupSynsets(POS pos, String someString)
  - (maybe) boolean isDefined(String)
+ feature: api: POS.ALL support for exhaustive DictionaryDatabase iteration methods 
  + words()
  + wordSenses()
  + synsets()
  + searchByPrefix()
  + searchBySubstring()
  + relations()
~ feature: add GUI unit/functional tests with FEST-swing
  * https://easytesting.org/swing/wiki/pmwiki.php
    - filed https://java.dzone.com/news/festive-functional-tests-swing
  * https://java.dzone.com/news/festive-functional-tests-swing
  + decent keyboard-nav test of core search window
  + test PopdownButton Enter key with mouse in it (was hard problem to solve!)
  - test getDominantCasedLemma
  - test SearchFrame
    - validate JList contents
  - test font zoom
  - test multiple windows
< feature: api: add generated unit tests with ScalaCheck
+ bug: gui: fix wonky POS button menu behavior (behaves very differently across different LookAndFeels)
  - consider making POS buttons toggle buttons - have window closing auto-toggle them
+ feature: api: refactor DictionaryDatabase methods to take String, POS rather than POS, String - more natural - use Eclipse to do this
+ feature: version information in jar and About dialog
+ feature: up/down arrow navigation of search results from searchField
+ bug: multi-click behavior improvments
+ bug: need to create new key (with keytool) to sign the jar (with jarsigner via Maven)
  and upload it with Cyberduck
  keytool -genkey -alias "Luke Nezda" # password "secret", makes new keystore
  keytool -selfcert -alias "Luke Nezda" # issue myself a new/extended certificate
  ! if jarsigner shows:
    Warning: The signer certificate has expired.
    jnlp on OS X acts crazy (basically hangs and has to be Force Quit-killed)
+ feature: update .jnlp file using pom.xml properties

- API
  ~ feature: api: meta-relations (e.g., Hypo/InstanceHypo)
    ? can a node have hyponyms AND instance hyponyms (or hypernyms AND instance hypernyms) ?
      - write test to look
    - good example: full hyponyms of "person"
    - test cases:
      - "head of state" hyponyms should include "Bill Clinton"
        HYPONYM*, INSTANCE_HYPONYM
      + "President of the United States" hyponyms "Bill Clinton"
        HYPONYM*, INSTANCE_HYPONYM
        * note PofUS has no actual HYPONYM
        = in some sense, HYPONYM has subTypes INSTANCE_HYPONYM (postTypes?)
          = in another sense, they could be considered equal types, although they never co-exist, they have very similar meanings
        ? could it also be said that INSTANCE_HYPONYM has superTypes HYPONYM* ?
        * ideally, we'd like to limit the number of RelationTypes which have auxiliary types to limit the extra
          implied search "leniency"
      - "Bill Clinton" hypernyms should include "President of the United States", "head of state", "person"
        INSTANCE_HYPERNYM, HYPERNYM*
        * note BC has no actual HYPERNYM 
        = in some sense, INSTANCE_HYPERNYM has subtypes HYPERNYM* (postTypes?)
      + "President of the United States" hypernyms "head of state"
      - "President of the United States" hyponyms should NOT include its hypernyms (e.g., "head of state")
        - but in current impl
  ~ feature: api: performance (and correctness) comparison between yawni and Princeton C WordNet API
    - compare to JWNL, JAWS
      - doesn't even have build script
    - add src/test/cpp/
      * generate token-per-line file of something from Project Gutenburg
        - doesn't test collocations!
        ? tokenize with Lucene and create longest-match code
      * currently testing with /usr/share/dict/words (near zero cacheing benefits)
    - edu.brandeis.cs.steele.wn.browser.Searcher
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -cp target/yawni-core-2.0.0-SNAPSHOT.jar edu.brandeis.cs.steele.wn.browser.Searcher > /dev/null
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | src/test/cpp/wnlemmatizer > /dev/null

      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -cp browser/target/signed/yawni-browser-2.0.0-SNAPSHOT.jar org.yawni.wn.browser.Searcher > /dev/null
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -cp data/target/signed/yawni-data-2.0.0-SNAPSHOT.jar:browser/target/signed/yawni-browser-2.0.0-SNAPSHOT.jar org.yawni.wn.browser.Searcher > /dev/null

      # verified same search results with and without filters
      # NOTE: redirecting to disk rather than /dev/null sometimes increases rate by a lot (55s vs. 37s; very reliably!)
      unset WNHOME && time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -cp data/target/signed/yawni-data-2.0.0-SNAPSHOT.jar:browser/target/signed/yawni-browser-2.0.0-SNAPSHOT.jar org.yawni.wn.browser.Searcher > filters
      
      # uses WNHOME env ; theories: mmaping frees up RAM for caches increases performance; something about jar IO is much slower (unzipping, copying large buffers into place, "indexing" into jar...)
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -cp browser/target/signed/yawni-browser-2.0.0-SNAPSHOT.jar org.yawni.wn.browser.Searcher > no_filters

      # uses WNHOME env AND has Bloom filters available: less memory avilable for caching decreases performance
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -cp data/target/signed/yawni-data-2.0.0-SNAPSHOT.jar:browser/target/signed/yawni-browser-2.0.0-SNAPSHOT.jar org.yawni.wn.browser.Searcher > filters

      # using dist jar which includes data (target/signed/yawni-wordnet-browser-2.0.0-SNAPSHOT.jar 9.6MB)
      # org/yawni/wordnet/browser/log4j.properties
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -server -cp browser/target/signed/yawni-wordnet-browser-2.0.0-SNAPSHOT.jar org.yawni.wordnet.browser.Searcher > filters
      # pipe into wc -c to verify correctness, without worrying about disk related issues (saves about 15% of time!) : expect 10905119
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -XX:-PrintCompilation -Xms128m -Xmx128m -Xbatch -server -cp browser/target/signed/yawni-wordnet-browser-2.0.0-SNAPSHOT.jar org.yawni.wordnet.browser.Searcher | wc -c
      # combine stdout & stderr
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -Xms128m -Xmx128m -Xbatch -server -cp browser/target/signed/yawni-wordnet-browser-2.0.0-SNAPSHOT.jar org.yawni.wordnet.browser.Searcher 2>&1 | wc -c
      
      # hacking in options
      time cat warAndPeace/wrnpc12.txt | tr -sc "[A-Z][a-z]" "\n" | java -Xms128m -Xmx128m -XX:+PrintCompilation -server -cp browser/target/signed/yawni-wordnet-browser-2.0.0-SNAPSHOT.jar org.yawni.wordnet.browser.Searcher 2>&1 | wc -c
      * in hypernyms mode, wc -c = 81389992 ; 
        real	1m49.083s
        user	1m11.643s
        sys	  0m41.823

        real	1m36.346s
        user	1m11.141s
        sys	  0m41.721s
        
        real	1m37.840s
        user	1m11.293s
        sys	  0m41.029s

        # morphosemantic relations, Google Collections
        real	1m49.194s
        user	1m25.004s
        sys	0m41.156s
        
        3098905 B, 574659 words ~30 kB/s ~5.7 k words/s

    * lots of variables when doing performance testing
      - code
        - various Cache implementations
      - JVM options
        -server
        -Xbatch
        -XX:SoftRefLRUPolicyMSPerMB=2500 https://java.sun.com/docs/hotspot/HotSpotFAQ.html
        -Xmx !
        -Xms (especially as times get very short - need longer test)
      - environment
        ! WNHOME / WNSEARCHDIR
        - machine load
        - machine on AC power (influences CPU down clocking)

    - optimization opportunities:
      * IO methods most costly: readLineWord(), scanForwardToLineBreak(), scanToSpace()
      + re-use StringBuilder (and ensureCapacity()) rather than making and tossing buffer every time
      + rather than scan-then-fill, just scan & fill -- little uglier code, little less safe ?
      - cache indices ('position') of line breaks - ideally want to populate this on the fly
        could use BitSet where 1's are newlines but doesn't provide means of marking undecided 
        bytes - could this be filled fast enough - background thread would certainly be fine
    - results:
                 C++ wnlemmatizer  yawni
         'words' 5m1.875s          0m47.293s (6.3x)
    War & Peace  23m21.491s        1m44.244s (13.4x)
                 C++ wnlemmatizer
                 w/o TrueCase
         'words' 2m59.294s         0m47.293s (3.8x)
    War & Peace  9m36.705s         1m44.244s (5.5x)
                                   1m27.662s after Synset parsing optimization (6.5x)
    
    War & Peace: latest Yawni results 10/25/2009
      (no Bloom filters)
      real    0m42.235s
      user    0m38.894s
      sys     0m5.685s

      with Bloom filters
      real    0m37.415s
      user    0m35.235s
      sys     0m5.557s

      only put matches into LRU cache (let Bloom filter handle non matches)
      real    0m33.618s
      user    0m28.612s
      sys     0m5.586s

      only put matches into SoftCache (let Bloom filter handle non matches)
      real    0m25.552s
      user    0m21.326s
      sys     0m5.491s

  < feature: api: implement CharSequences#sameLetterDigitSequence
    - a comparison predicate that specifically ignores case and ' ', '.', '-', '_'
    ? where would this be used ? getindex() impl ?
  ~ feature: api: getindex() impl
    - convert from BigInteger to more efficient int
    - limit extremely unlikely combos (e.g., 2+ dashes)
      - maybe multi-word getindex() logic doesn't make as much sense for non-NOUNs
    - make these heuristics optional (config param or method param?)
    * Goal: These heuristics should be strict enough to not make stupid mistakes ("I ran" → "Iran", "be an" → bean")
      and loose enough to catch most reasonable variants ("wild goose chase" == "wild-goose chase",
      "wide-screen" == "widescreen")
    - search for "U.S." should match search for "U. S."
      - requires removing space during lookup
    - search for "n. y. stock exchange" should match search for "n.y. stock exchange"
      - requires adding artificial space during lookup
    + search for "internal combustion engine" should match "internal-combustion engine"
      - requires replacing "-" with space during lookup
    o search for "A.M." should match "AM"
    x "U.S." should NOT match "us" - could filter on length ? maybe just a hot word cause its a common preposition ? could filter if has any vowels ? could enforce case ?
    o "V.P." should match "VP"
    o "widescreen" should match "wide-screen"
    o "wild goose chase" should match "wild-goose chase"
    o "f.d. roosevelt" → "f. d. roosevelt" →? "fd roosevelt"
    o "a.k.a." → "aka"
    o "C.E.O." → "CEO"
    o "C.I.A." → "CIA"
    o "Dr." → "Dr" (like "Mr." matches "Mr", though is ambiguous with "Drive")
    o "e.g." → "e.g" →? "eg"
    o "et al" → "et. al." → "et al."
    o "etc." → "etc"
    o "DOA" → "d.o.a"
    o "BTU" → "b.t.u."
    o "U.S.S. Cole" → "USS Cole"
    * many initials already have their period-free form in the data files
  - feature: api: create lemmatizing Lucene analyzer
  ~ feature: api: add unit tests for FileManagerInterface routines utilizing toy files at classpath-relative paths/URLs
  + feature: api: ⊚ nice API to verb groups; add a field to WordSense (e.g., byte verbGroupNumber) and sort by it ? (https://wordnet.princeton.edu/wordnet/man/wngroups7wn)
    - since this relation is sort of lexical, we can add specicialized impl and filter on source WordSense, but return source Synset; note the common thread is the Word, NOT the WordSense
    - working on this: precomputing the transitive closure offline; 
      - respire: 00002325 00001740 00002573
      - twitch, jerk: 01891817 00009631
      - details
        - can exclude pairs (closure is pair) (978 of 1750)
          cat o3 | awkt '{print $2}'| grep '^[0-9]\+ [0-9]\+$' | wc -l
        - can omit explicit relations
      ? seems to be 1750 instances
        - rotate 'current' to front, sort | uniq → 1500 instances ?
          dups include
          00001740 00002325 00002573
          00001740 00002325 00002573
        - extras ? act only has 6 in UI, has 9 - following synsets which don't include focal word (e.g., act → play)
          [Synset 10435@[POS verb]<verb.body>{act, behave, do}]   +00010435 +01721556 +01719302 01722077 01719921 01716619 01716882 +02744977 +00013615
            ? 01719921 01716619 01716882 - these 
             01719921 act#10, play#25, roleplay#1, playact#1
             01716619 play#14
             01716882 play#26
        - intended usage of verb group appears to be for merging senses of a particular word, but transitive closure can cross word boundaries
          - generalized form seems more useful - concept is essentially super-synsets (establishes equivalence, not hyper/hypo -nym because no more general/specific relationship)
      - what form of transitive closure will be most useful ?
        - all same POS (VERB)
        - part of the closure is already represented -- just want to add the transitively implied parts
        - seems synsetOffset → synsetOffset multi-mapping is sufficient
  ~ bug: squash some of the zillion Xlint warnings (@SuppressWarnings on class(es)? though could hide real bugs) 
  - bug: api: doc: document sort orders of Word, WordSense, Synset, and Relation
    - Word: 
    - WordSense: xxx Synset (and then lemma for the few same-Synset ties (Doomsday, doomsday, Utopian, utopian)
    - Synset: 
    - Relation:
  - feature: api: doc: document approximate runtime of various search algorithms
  ~ feature: api: ⊚ add search support for java.text.Normalizer to allow searches for accented words to work (e.g., "resumé", "résumé", "résumés" to match "resume" (similar for "cliché" → "cliche"))
    - an alternative is org.apache.lucene.analysis.ASCIIFoldingFilter
    - Normalizer requires Java 6 which excludes some platforms - could use reflection
    - aka words with diacritics: https://en.wikipedia.org/wiki/List_of_English_words_with_diacritics
  < feature: interface to parse and cleanly represent (in code) glosstags corpus
    - convert to lighter JSON or binary XML format ?
    - delivered as 1 giant bzipped collection of XML files in directories
    - only work with the 'merged' files (226MB unzipped!) - prime candidate for mmap
      - merged.zip is only 31MB - maybe distribution should ship this way ?
      - similar merged.tbz is only 20MB - nice win
      ? I wonder how lzo would do ? (nice and fast)
  < feature: api: reverse iteration
  < feature: api: ConcurrentLRUCache
    - open source alternatives include Ben Manes' ConcurrentLinkedHashMap and Google Collections / Guauva (MapMaker)
    - file access is still synchronized: ThreadLocal file pointer would be best solution for this
    - ThreadSafetyTest time with:
      - LRUCache: about 35 seconds
      - ConcurrentLRUCache (LRU): about 38-40 seconds
      - ConcurrentLRUCache (): about XXX seconds
      - UnboundedCache (): about ∞ seconds -- OutOfMemoryException
  < feature: gui: GUI Maven target (and delete script) or use a local Java Web Start
  < feature: convert CharStream interface to long's (from int's) to support huge files
  < feature: gui: make JList scroll-rate accelerate ? I swear I worked on this for large result sets - maybe the difference is scrolling in terms of JScrollBar or content ?
  < feature: api: should be able to use WordNet 3.0 UNIX distribution dict/ files on Windows
  + bug: fix always-singleton for WordSense.AdjPosition flags accessor
  + bug: source files not being interpretted as UTF-8 -- uncommented line in pom.xml
    + can be checked by looking for Unicode arrow as in RELATED TO → (verb) cat#1
  + feature: implement "uniq" in Utils
  + feature: update getIndexedLinePointer() to provide useful non-matching
    return like java.lang.Arrays.binarySearch() (don't forget unit tests!)
    + use this to make getPrefixMatchLinePointer() logarithmic instead of linear time
  + feature: refactor FileManagerInterface to take non-file specifying arguments last
    in order to allow cleaner optional arguments (use Eclipse to refactor)
  + feature: (refactor) rename FileManagerInterface.getMatchingBeginningLinePointer()
    to getPrefixMatchLinePointer()
  + bug: checkstyle issue:
    [WARNING] File encoding has not been set, using platform encoding MacRoman, i.e. build is platform dependent!
  + feature: capability to substring search all pos at once (aka POS.ALL)
    + implemented MergedIterable (and unit tests)
      / merge results with a CompositeComparator (Collator?)
    + how to represent this in the API
      + POS.ALL ? (like POS.SAT_ADJ - what the hell is this anyway ?)
        (considered null (POS))
      - merge string-equal multi-POS words for UI compactness?
        - doesn't make selection ambiguous since Browser is built to handle display of multiple POS
      - SearchFrame JList items should show all active POS 
        - Kirill-style rendered icons? Noun, Verb, Adj, Adv - pretty long text-wise
        - use background color swatches ?
      virtual POS in SearchFrame menu only ? ("*" - kinda begs for a label for this combobox then though)
      ? how many internal search routines would have to change to support this comprehensively ?
        - zero (merge results with external mechanisms), all, some ???
  + feature: api: rename "searchIndexBeginning" to "searchByPrefix"
  + feature: core rename "searchWords" to "searchBySubstring"
    + tried to get Eclipse to work but moved files pissed it off bigtime
  + feature: api: all atomic core types (i.e., all but Relation) are Iterable<WordSense>
  + feature: Word, Synset, WordSense, Relation should implement Comparable
  + bug: substring search for "-" (hyphenated words) not found
    + would be cool to search for terms containing spaces too (collocation search)
    ~ this means SearchFieldDocument needs to tolerate a leading word delimiters/"spacer"
  + feature: api: mavenize project
  + feature: api: AdjPositionFlags API (PREDICATIVE, ...)
  + feature: lazy, correct getRelationTypes()
  + feature: Word - memory optimization (only synset offsets OR synset objects, NOT both)
  + feature: WordSense
    + make verb frame info accessible
    + make adjective positions an enum and make accessible by an EnumSet (only 7 possible combos?)

- Browser (aka GUI)
  < feature: gui: GTK LAF -- too many bugs to list: https://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6417110
    + solution: for Windows and Mac, use native LAF, for Linux use CrossPlatform LAF
    - Linux doesn't use anti-aliased fonts
    - Linux and OS X + Java 5: preferred button size much smaller (esp on Linux)
    - Linux and OS X + Java 5: fonts much smaller ⌘
    - Linux and OS X + Java 6: font sizes OK, but File → "Substring Search" menu label overwritten by accelerator text "⌘+F"
  ~ feature: gui: find-as-type (at least in substring search)
    - optimize re-fill, esp for short searches ('a')
      - caching recent searches would be effective (lotsa RAM?)
      - adding char to search string never increases the number of search hits
        - unless it is inserted not at the end of the current search string
      - results are always alphabetized - which conditions to adjacent searches
        have common prefix/suffix hit sub-lists ?
    - searching for space/dash in PREFIX mode should be more clearly disallowed
      or the resulting search failure should be more clearly indicated
      - e.g. Firefox Find turns red if there are NO hits
    - make (*valid*) selected index stay synced to Browser
      - enter key could sync to Browser ?
    - consider alternate sorts for results (longest first, shortest first, "gloss-corpus" frequency ranked?)
  - feature: gui: ⊚ content auto complete in text fields (esp if there's only 1 completion left)
  - feature: gui: make Browser statusbar exactly the same height as iTunes one (include re-sizer handle) (POLS: Principle of Least Surprise)
    - check out mac_widgets BottomBar
  < feature: issue searches and generate output for multiple POS in parallel with pool of 4 worker threads
    ? do this in library ? almost every search and search component could
      be run against the POS DB files in parallel - trick is coalescing the results
      without introducing too much contention - some kind of use either LinkedBlockingQueue 
      ConcurrentLinkedQueue or PriorityBlockingQueue to aggregate results
      - ExecutorService.invokeAll() will handle the work distribution but efficiently merging
        the result set will have to be done via a shared queue as posited
  - bug: gui: content tree/DAG rendering issues
    - switch from <li> to <table> - more flexible and better looking
      * begging for XML and XSLT ?
    - anti-alias <li> circles (currently using "*" for speed)
    - general intermediate search result format to separate model and view would be
      ideal solution here (e.g. JSON, DOM, XML)
  < feature: gui: stats tables in About dialog 
    - number of nouns, verbs, ...
    - # of length x words (histogram)
    * fill in numbers matrix style for bonus points
  - feature: gui: highlight query word in red like wnb in HTML results (bold now)
  < feature: make L&F preferences (default.xml) based
  - bug: gui: SearchFrame always takes text of BrowserPanel even if it was indirectly, automatically populated via clicking on a SearchFrame list item search result
    - tricky because this field is used to store state used by POS RelationType menus
    - perfect use for SnapBack
  < feature: gui: add Undo/Redo to SearchFrame's searchField like BrowserPanel
  - feature: gui: if browser is close to left edge of screen, align SearchFrame on right edge of browser (instead of attempting to align it to the left edge)
  < feature: gui: save window positions across boots
    - load default preferences (don't clobber pre-set ones?)
      - what if defaults load itself fails? fail whole program or hard-code default also !?
    - add button/commandline/environment/system variable to trigger reloading defaults.xml
    - preferences modification screen ?
    - Preferences API FTW: https://java.sun.com/j2se/1.4.2/docs/guide/lang/preferences.html
      which is like a platform-independent Windows registry (note has KEY and
      value size limitations so don't try to store serialized objects in there)
      - how does this interact with Java Web Start ?
    - write properties to jar file is a bad idea: 
      https://forum.java.sun.com/thread.jspa?threadID=5207074&messageID=9830109
      * risks corrupting the jar file (and invalidating its signature)
    + load defaults.xml file from jar file (updated common-build.xml <jarify> macro)
      + load defaults.xml from Class.getResourceAsStream();
  + bug: gui: debug DropDownMenu on OS X using "show me *every* event" AWT thing
    AbstractButton.isFocusPainted() may be useful
    ? refactor using Swing Hacks DropDownMenu
  + bug: gui: double-click and triple-click annoying in Search field
    * issue is JTextField only handles double and triple click, but a long
      series of consecutive, temporally adjacent clicks results in getClickCount()s 
      of 4,5,6,.. which are unhandled.
      - could consume() 4+ events, clone them, and redispatch them as 3-click events
    * Caret: 'dot' is the current position, 'mark' defines the other end of the selection
    MouseEvent
    MouseListener
      mousePressed(MouseEvent)
        MouseEvent
          int getClickCount()
          long getWhen()
    - act directly on multi-clicks identified using a lastClickTime state variable 
    - use javax.swing.Timer to act on single clicks which turn out NOT to be multi-clicks
      https://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&f=2&t=009927
    AbstractButton.getMultiClickThreshhold() may be useful
  + feature: gui: generate the magnifying glass icon with Java2D and make it the substring menu icon; used DrawIt
  + feature: gui: what is the "standard" undo/redo icon ?
    ~ macvim (7.1r27) ones look pretty official (includes the swishy orange undo arrow)
      + emailed author and requested SVG version but he never responded
    - just generate the OS X one ? (orange swishy arrow)
    - https://tango.freedesktop.org/Image:Tango-feet.png
    - https://java.sun.com/developer/techDocs/hi/repository/index.html
    - xswingx /org/jdesktop/xswingx/demo/Search_SnapBack.png  
  ~ feature: gui: add Cmd++ / Cmd+- font scaling
    - add more sizes and cycle through results
    - add this capability to SearchFrame JList items
    - associate with standard named Actions HTMLEditorKit.FONT_CHANGE_BIGGER / HTMLEditorKit.FONT_CHANGE_SMALLER
    - Action.MNEMONIC_KEY - KeyEvent
    + Action.ACCELERATOR_KEY - KeyStroke
    + Action.SMALL_ICON - menu, toolbar icon
    - Action.SHORT_DESCRIPTION - tooltip
    + generate associated icons: simple anti-aliased small/large bold sans font "A" (mimics OS X icons))
      https://weblogs.java.net/blog/kirillcool/archive/2005/07/how_to_create_s.html
    + add menu options
  < bug: gui: anti-aliasing not settable via Java 1.5 web start (known web start bug) - make a generic recursive function to set it on JComponent in an application
    ? what is swing.useSystemFontSettings (https://java.sun.com/j2se/1.5.0/docs/guide/javaws/developersguide/syntax.html#application_desc) which is a respected web start property
  < bug: gui: SearchFrame / Browser window switch on OS X has ugly, slow, visible repaint with apple.awt.brushMetalLook L&F
    - possible fixes in:
      https://developer.apple.com/technotes/tn2007/tn2196.html
      - use Quartz rendering pipeline options ?
  < bug: gui: native Linux (GTK) L&F seems to work on lcc64 only ? java6 only ? 64-bit JVM only ?
  < feature: gui: hyperlink word senses in glosses using new https://wordnet.princeton.edu/glosstags
  < feature: gui: add font zoom buttons to BrowserPanel (could use same ones created for the menu)
  - feature: gui: add edit menu and copy, paste, select all, +undo, +redo to it
  - feature: gui: add back/forward (history) buttons to BrowserPanel (just trigger undo)
  - feature: gui: in search fields, filter input and show history; could use editable combobox style dropdown (at least on Linux, Windows)
    - xswingx / swinglabs
    - using Swing Hacks technique
  ~ feature: gui: history in text fields (xswingx)
  < feature: save history across boots - Preferences API - people would love this,
    - UndoManager will need to read these on app load (def in separate thread!)
    * would need a UI element to clear the history as well!
    + undo should trigger focus shift to searchField ? (currently does)
  < feature: make substring search a "drawer" or splitpane like PDF search in Apple Preview
  - feature: gui: add WNHOME assumptions / prompt to splash screen OR installer to Web Start launcher
    - could be as simple as prompting user if environment variable AND Java preference cannot be found
  + feature: gui: Java Web Start (aka JNLP)
    - works under ideal conditions, but thread safe singleton and misconfiguration
      means exceptions are wrapped in ExceptionInInitializer
    ? where would the default installation location be on Windows ? (e.g. where did 2.1 go?)
      <property name="WNHOME" value="c:\Program Files\WordNet\2.1\"/>
    ? where would the default installation location be on Linux ?
      - this only matters for the JWS version - using Ubuntu default WordNet package location
        /usr/share/wordnet
        for WNSEARCHDIR
        and 
        /usr/local/WordNet/3.0/dict
        for WNHOME otherwise (default Princeton install path)
    ? should we prompt to find it ? install it ?
  + bug: "Bigger Font"/"Smaller Font" option lost on any content update of BrowserPanel
    - load/store this as a preference and default it to large 
    - wrap up the other font size variants
  < feature: work on concurrency / snappiness
    + make substring / prefix radiobutton switch re-issue search
    + make substring results start coming back ASAP
    + nice opportunity for CompositeComparator (ended up calling this MergedIterable
      - still have to start from the prefix beginning
    + Swing Hacks shows techniques for doing this easily for substring/prefix search
  + feature: double click mouse listener for JList in case switch from SearchFrame to BrowserPanel,
    clear / change search, then user expects clicking on list item to select it and
    in turn redisplay that item in the BrowserPanel
  + bug: "e-mail" All POS search had duplicate for "e-mail"
    - same happens for "run" (easiest using to find using prefix search)
    + these are string level collisions across different POS
      - need to add de-duplicating wrapper (same "word" applies to all POS anyway)
  + bug: fixed issues with reading / storing preferences
  + feature: add statusbar to SearchFrame with search pos, text, and the number
    of hits (maybe "n of m" too) or basic instructions like browser has
    - substring Noun query "irone" has 1 hit - fix statusbar to say "1 result" (not "1 results")
    + factor out common code ? - not enough to worry about
  + feature: remember SearchFrame's radio-button position (Substring/Prefix) across
    boots with Preferences
  + bug: because of JList cell prototype, horizontal scrollbar is always showing which is confusing
  + bug: prevent crash on searchField content change
  + bug: constrain search fields to non-junk
    - too long, extra whitespace, ...
  + bug: SearchFrame JList should always select at least row 0
    and the selected row should reset when list contents reset
    + clear selection on all new searches
  + bug: SearchFrame JList needs mouse listener
    + solution was just to use default list selection model and clearSelection()
      when contents changed
    - to reproduce, in browser search for ".22", Cmd+F, doube-click on first (highlighted match)
    * can probably generalize with PropertyChangeListener ?
  + feature: add insets/borders (pad) content text areas
  + bug: OS X undo is Command+Shift+Z, not Command+Y
  + feature: SearchFrame should always open in the same place relative to the browser
    even if the user moves the browser
  + bug: don't let text area get focus if it is empty!
  + feature: set initial text in search window to current text of browser window
  + bug: ensure posComboButton menu enable/disable is synced to search field
  + feature: add capability to drag with mouse from any non-interactive part of Browser or SearchFrame
  + feature: add Prefix search capability
  + bug: set minimum and preferred sizes on SearchFrame and BrowserFrame
  + feature: basic undo / redo support in the searchField
  + feature: gui: fix to say "Applies to m of the n senses of <lexeme>"
  + feature: gui: decrease padding between search field/label and pos comboboxes
  + feature: gui: pretty nice HTML rendering of information
    + make content font Sans Serif
    + fixed huge amount of extra spaces in HTML lists
  + feature: gui: odd tab/focus issue with JList in SearchFrame
  + feature: gui: add Cmd+W to close Substring Search window on OS X
  x feature: gui: add ? to close Substring Search window on Windows and Linux
  + feature: gui: add hot key to open search too (Cmd+f)
  + feature: gui: fix Quit in File menu
  + on OSX, menus are "correct"
  + feature: gui: always show horizontal and vertical scrollbars per OSX UI guidelines (avoids weird shift crap)
  + feature: capitalize POS labels (noun → Noun)
  + fixed numerous issues with Search Substring
    * no limits on search (e.g. no "Error: search string less than 3 characters")
  + feature: gui: simplified layout management
  + feature: gui: dynamic combobox content based on per-POS search results
  + feature: combo boxes take size of their pos label
  + bug: partial fix for multi-stem issue (talks, talk)
  + bug: gui: various state-fixes for status bar
  + feature: almost no indexed based loops now
  + feature: many more RelationType displays are correct now (Adj syns, etc)

+ feature: rename Word → WordSense, IndexWord → Word
  + use Eclipse refactor - much better Java support
    + update docs, browser, example, tests
  + made a proper XCode project
    - probably would be easier with XCode ? - limited Java support
    - still need to gather output of 'ant test' command
      - would it update javadoc refs too ?
+ feature: gui: revive browser
  + get this to at least compile again
  - where should this go ? 
    * not needed for library to function, although adds no dependencies
      very small increase in jar file size -- maybe who cares ??
    → who cares - add browser package
- bug: api: audit, clean up FIXMEs and TODOs
  - factor some inner classes into outter, non-public classes
  - remove cruft / extra debug crap
< feature: consider taking CharSequence for search in interface to allow use of mutable query "String"'s, etc (from user perspective, still fully backwards compat with String (Java 1.5-wise)
+ feature: run code through various tools (God bless Maven)
  + findbugs (https://findbugs.cs.umd.edu/demo/jnlp/findbugs.jnlp)
  + CPD - looks good (https://pmd.sourceforge.net/cpd.jnlp)
+ bug: make line ends native in files and svn
< feature: work on Morphy
  * add exact match in 1 spot
  - simplify various parallel arrays (SUFX, ADDR, OFFSETS, CNTS)
  - see getindex() feature
  - NEW fancy search options
    - properly stem / find prefix variants
    - guess to find missing items ("blogging")
    ? consider returning morphologically derived terms ?
  - strive for symmetric search results
    FAQ https://wordnet.princeton.edu/faq#morphology says "the morphological component of WordNet is unidirectional"
    "long time" is a NOUN, "longtime" is an ADJ, both come up in searches for
    "long time", but only the ADJ comes up in searches for "longtime"
  - why doesn't "blogging" → "blog" work ? (double g)
    - seems "running" (double n) is considered an exception ($WNHOME/dict/verb.exc)
    ? maybe morphy should just try this variant ?
    - similar for removing e in shaking hands → shake hands
  - shootout test against Porter stemmer (copy from Lucene)
    - many sublteties here - may stem incorrectly (???), may not (blogging→blog)
  - stem special words: naive → naïve ; resume → résumé
  ~ add unit test to Lucene to ensure equality with Snowball generated Porter stemmer
  - consider integration with Snowball ?
~ feature: api: compare interface summary stats with those in: $WNHOME/dict/log.grind.3.0
  ? will this filename remain the same ?
- bug: api: how come Doomsday and Utopian came up as case ambiguous, but Moon, moon didn't ?

- feature: api: doc: measure memory requirements
  - write program to generate report of each lexeme and relation
  - estimate this value -- outline has many of the details
  ? is there a tool to do this ?
  - all IndexWords, Synsets, and Relations 
    - approximate this:
  
  * used 'hat' https://hat.dev.java.net/
    Synset: 76
    Word: 22
    IndexWord: 29
    Relation: 20

  - all caches full

Features / Enhancements
~ feature: api: phase in support for "ALLSENSES" (original WN libraries have this for core search routines (findtheinfo(...) and in_wn(...))
< feature: api: create bounded length longest match algorithm and run over documents
< feature: re-write grind in Java with jflex and/or javacc
  - very old, suspect C code with scary comments in lex file in particular

WordNet features (unexposed)
+ feature: add senses tagged frequency support
  - 90% done - need more tests, caching, and cleanup
  - add unit tests (esp for adj's)
  + add senses tagged frequency to toString()
    - put in Word.getLongDescription()
+ feature: add lexfilename support
  + have lexfilenum gtg (including "inline" copy)
  + String getLexCategory()
+ feature: add support for cntlist.rev
  - $WNHOME/dict/cntlist.rev
  - is $WNHOME/dict/cntlist.rev - mappings to the previous versions senses ?
  ? is this the same as index.sense / sense.idx on Windows ?
    - cntlist.rev is a superset of index.sense - their formats are similar
      cut -d" " -f1,3,4 dict/index.sense > index.sense.no_offsets
      egrep -v " 0\s*$" index.sense.no_offsets > index.sense.no_offsets.non_zero
      wc -l dict/cntlist.rev index.sense.no_offsets.non_zero
      
      37387 dict/cntlist.rev
      35478 index.sense.no_offsets.non_zero (-1909 - changed sense numbers, conflated/dropped senses, etc)
      
+ feature: add support for lexnames 
  - $WNHOME/dict/lexnames
  * already parses lexfilenum
  - for now will only require a byte, but can show an int in the interface
+ bug: verify this Tokenizer nextHexInt() crap - is that for real?
  - all encountered thus far seem correct

Performance
+ bug: cache null values!!!
  - complete ?
< feature: api: convert over to CharSequence and consider using ByteCharBuffer
  - eliminates a lot of immediately discarded String objects
  - eliminates backing char[] storage reqs of longer lived Strings
< feature: api: consider converting Synset's char[] gloss to a UTF-8 encoded byte[] to chop the memory requirements in half for these large strings.
  - 16,557,481 letters (about 32 MB as char so would be about 16 MB as byte)
+ bug: api: use WeakReference's/ WeakReference[] (really I think SoftReference's/SoftReference[])
  + use Google Guava's MapMaker
  * Steele's original code referred to this (was not yet in JDK); see 
  - needs to decide exactly where this might make sense - oddly, this memory saving device could actually cost more than it saves

    Yonik's SimpleStringInterner for lockless pooling
      or maybe ConcurrentLinkedQueue

    graphs = new MapMaper.softKeys().weakValues()
    says weakValues() are poor choice for cache (suggests softValues())

    - does it make more sense to:
      - make the caches have soft values
      - make the interconnections between classes use soft references
      - the interconnectinos which exist
        Word's Synset[] (ALL paged in on demand)
        Synset's List<WordSense> AND List<Relation>
         - we could make many of these things lazy / on-the-fly (e.g., clone the tokenizer)
         * in particular, its likely only a few Relations will be used (e.g., HYPERNYM)
        WordSense's Synset
        Relation's source (target is paged in on demand)

        rough ASCII depiction of the interconnections:

                        v----\
        Word -+→ Synset -+→ WordSense
                         \+→ Relation |→ Synset (src)
                                       |→ WordSense (src)

      - stemming use case only needs Words
      - smart-case stemming needs WordSenses which need Synsets (requires NO Relations)
      - only simple synonyms needs Synsets and WordSenses (requires NO Relations)
      - only hypernyms requires instances of only 1 Relation

      ? what caches exist ?
        - Cache<DatabaseKey, Word> indexWordCache
        - Cache<DatabaseKey, Synset> synsetCache
        - compare the lifetimes of Word and Synset
          - 1 Word pages in n Synsets and keeps hard refs to them
          - nothing maintains refs to Word (∴ makes a lot of sense to cache Words)
            - the memory commitment of a cached Word increases when its Synsets are paged in
              - the amount of WordNet which can be kept alive by the cache can grow pretty large
                - Words bring in batches of Synsets
                - Synsets bring in batches of WordSenses
                - Synsets bring in batches of Relations 
                  - these can select/retain wide swaths of hyponyms and hypernyms
                * Relations seem like biggest cross-connecting memory leak hazard ?
                  - even though they only have hard links in 1 direction, once the 
                    symmetric Relation (e.g., HYPONYM/HYPERNYM) is cached, both subgraphs
                    are snared
                    ... X → Y
                        X ← Y ...
      ? could we add more caches ?
        - WordSense's of a Word
      
      - must have test to compare performance with
        - e.g., unit tests take about 50% longer without synsetCache (didn't dig in to which one; presume threaded antagonizers)
< feature: look for synchronization / liveness opportunities
< feature: make amount of file to mmap configurable
  - test smaller values!!
< bug: use of singleton's prevents comparing distinct instantiations of the DB
< bug: caching AND mmaping together may use too much memory - consider only one or the other or making this configurable
  - unverified -- memory usage seems good
+ feature: using long's for file offsets seems like overkill - it's gonna be a while till a plain-text WordNet uses up 4 bytes

General Project Quality
+ bug: run RAT to ensure licenses are all good (https://code.google.com/p/arat/)
~ bug: api: test on Windows, Linux, Mac
~ bug: api: add javadoc to all important methods
  - remove dated/wrong comments regarding original impl
  - remove LN comments ? maybe replace with @author for now ? use tool to compare APIs
  - consider using prose from https://www.w3.org/TR/wordnet-rdf/
+ bug: make sure there are no tab's
+ bug: make sure line endings are all consistent (native and nailed down in svn)

- overhead of java.util.zip is significant source of lag
  - if we don't compress the jar, loading the data takes 139ms
  - if we compress the jar, loading the data takes 480ms

- massive memory efficiency improvement
  - store files as large char arrays and maintain offsets to newlines
    - load takes longer ?
    - maybe using CharSequences backed by CharBuffer is just as good as arrays ?
    - uses more memory ?
      - full caches big too?
        - consider a "WeakReference" based cache
          - if app needs memory for something else, let cache drain
  - String vs ByteCharBuffer
    String
      int offset, int length, int hash, char[] ref and Object and char * length
    Buffer
   
********************************************************************************
   int capacity, limit, mark, position
      ByteBuffer
        Endianess ref
        MappedByteBuffer
          DirectByteBuffer ref, int mapMode, ...
    * key here is re-use, not object size
      - although, offset and length into ByteCharBuffer would be pretty darn compact
  - RelationType[] vs EnumSet<RelationType>
    - RelationType[]
      - object, int length, length * 4 = 16+4*len
    - EnumSet<RelationType>
      - object, Class ref
        MiniEnumSet: 12+4+4+4=24 (tie at len=2)
          - size (int), E[] ref, long // could save 8+4=7 bytes
            - size could even be computed
            - E[] can be pulled from EnumSet.elementClass

- ByteCharBuffer / CharSequence change
  + backing char[] object and content eliminated in many places
    + reduces memory required (large searches, caching, etc)
    + reduces load on garbage collector
  + a ByteCharBuffer is a partially changable CharSequence - its
    position and limit can be changed resulting in it effectively
    "being" a different CharSequence
  - Thread saftey is more of an issue
    - ideally, re-use the Buffer (position, limit)
    - content is only going to be used read-only

  - increased complexity
  - ByteCharBuffer assumes WordNet is ASCII

- selling points for Yawni as an Apache project
  - the ultimate English stemmer (for IR applications, e.g., Lucene)
  - Apache dictionary / lexicon resource
    - really, you need a stemmer to get maximum value out of it - could
      integrate with Lucene's slick new JFlex stemmer as part of a more general
      Apache NLP toolkit
  ? integrate with UIMA project:
    - UIMA - various NLP apps (pos, pchunk, doc/phrase/sentence-similarity (dup filtering), clustering
  - practical lexical semantic web resource
    - synergies with other Apache technologies (W3C RDF/OWL Representation of WordNet)
      https://www.w3.org/TR/wordnet-rdf/
      WordNetRDF https://wordnet.princeton.edu/~agraves/
    - candidate ISO lexicon standard: Lexical Markup Framework (LMF)
  - makes WordNet much more approachable to developers
  - super memory efficient and fast
  - WordNet is an estabished project and no Apache licensed API exists
    - no high quality, pure Java commercial-friendly license exists

